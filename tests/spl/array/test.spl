include "int_array.spl";

procedure test_invariant_bug(a: Array<Int>, high: Int)
  requires acc(a) &*& arrayseg(a, 0, high)
  requires high >= 0 && high <= a.length
  ensures acc(a) &*& arrayseg(a, 0, high)
{
  var i := 0;

  while (i < high)
    invariant 0 <= i && i <= high
    invariant acc(a) &*& arrayseg(a, 0, high)
    invariant forall j: Int :: 0 <= j && j < i ==> a[j] == 4
  {
    a[i] := 4;

    i := i + 1;
  }
}

procedure test_invariant_no_bug(a: Array<Int>, high: Int)
  requires acc(a) &*& array(a)
  requires high >= 0 && high <= a.length
  ensures acc(a) &*& array(a)
{
  var i := 0;

  while (i < high)
    invariant 0 <= i && i <= high
    invariant acc(a) &*& array(a)
    invariant forall j: Int :: 0 <= j && j < i ==> a[j] == 4
  {
    a[i] := 4;

    i := i + 1;
  }
}

procedure test_invariant_bug1(a: Array<Int>, high: Int)
  requires acc(a) &*& arrayseg(a, 0, a.length)
  requires high >= 0 && high <= a.length
  ensures acc(a) &*& arrayseg(a, 0, a.length)
{
  var i := 0;

  while (i < a.length)
    invariant 0 <= i && i <= a.length
    invariant acc(a) &*& arrayseg(a, 0, a.length)
    invariant forall j: Int :: 0 <= j && j < i ==> a[j] == 4
  {
    a[i] := 4;

    i := i + 1;
  }
}

procedure test_invariant_no_bug1(a: Array<Int>, high: Int)
  requires acc(a) &*& array(a)
  requires high >= 0 && high <= a.length
  ensures acc(a) &*& array(a)
{
  var i := 0;

  while (i < a.length)
    invariant 0 <= i && i <= a.length
    invariant acc(a) &*& array(a)
    invariant forall j: Int :: 0 <= j && j < i ==> a[j] == 4
  {
    a[i] := 4;

    i := i + 1;
  }
}

procedure test_heap_access(a: Array<Int>, high: Int)
  requires acc(a) &*& arrayseg(a, 0, high)
  requires high >= 0 && high <= a.length
  ensures acc(a) &*& arrayseg(a, 0, high)
{
  var i := 0;

  while (i < high)
    invariant 0 <= i && i <= high && high <= a.length
    invariant acc(a) &*& arrayseg(a, 0, high)
  {
    a[i] := a[i];
    i := i + 1;
  }

}


/*
procedure create()
  returns (a: Array<Int>)
  requires emp
  ensures array(a) &*& a[0] == 111
{
  a := new Array<Int>(1);

  a[0] := 111;

  var b:= new Array<Int>(2);
  b[0] := 555;
  b[1] := 666;

  return a;
}
*/
