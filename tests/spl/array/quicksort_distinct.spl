include "int_array.spl";

procedure quicksort(a: Array<Int>, implicit ghost content: Set<Int>)
  requires array_cnt(a, content)
  requires forall i: Int, j: Int :: 0 <= i && i < j && j < a.length ==> a[i] != a[j]
  ensures  sorted_array(a, content)
{
  quicksort1(a, 0, a.length-1, content);
}

procedure swap(a: Array<Int>, i: Int, j: Int, implicit ghost iVal: Int, implicit ghost jVal: Int)
  requires acc(a) &*& (acc(a,i) &+& acc(a, j)) &*& a[i] == iVal &*& a[j] == jVal
  ensures  acc(a) &*& (acc(a,i) &+& acc(a, j)) &*& a[i] == jVal &*& a[j] == iVal
{
  var tmp := a[i];
  a[i] := a[j];
  a[j] := tmp;
}

procedure quicksort1(a: Array<Int>, lower: Int, upper: Int, ghost content: Set<Int>)
  requires acc(a) &*& arrayseg_cnt(a, lower, upper+1, content)
  requires forall i: Int, j: Int :: 0 <= i && i < j && j < a.length ==> a[i] != a[j]
  ensures  acc(a) &*& sorted_arrayseg(a, lower, upper+1, content)
{
  if (lower < upper) {
    var pivotIdx := lower + (upper - lower) / 2;
    var pivotVal := a[pivotIdx];
    swap(a, pivotIdx, upper);
    var idx := lower;
    var i := lower;
    var C1 := Set<Int>();
    var C2 := Set<Int>();
    var C3 := content -- Set(a[upper]); // distinct so this is ok
    while (i < upper)
      invariant idx >= lower && i <= upper && i >= idx
      invariant acc(a) &*& acc(a, upper)
      invariant forall k: Int, j: Int :: 0 <= k && k < j && j < a.length ==> a[k] != a[j]
      invariant arrayseg_cnt(a, lower, idx, C1)
      invariant arrayseg_cnt(a, idx, i, C2)
      invariant arrayseg_cnt(a, i, upper, C3)
      invariant content == C1 ++ C2 ++ C3 ++ Set(a[upper])
      invariant forall k in C1:: k < pivotVal
      invariant forall k in C2:: k >= pivotVal
    {
      if (a[i] < pivotVal) {
        swap(a, i, idx);
        idx := idx + 1;
        C1 := C1 ++ Set(a[i]);
      } else {
        C2 := C2 ++ Set(a[i]);
      }
      C3 := C3 -- Set(a[i]); // distinct so ok.
      i := i + 1;
    }
    swap(a, idx, upper);
    quicksort1(a, lower, idx - 1, C1);
    quicksort1(a, idx + 1, upper, C2);
  }
}
