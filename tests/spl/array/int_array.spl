function arrayseg_footprint(a: Array<Int>, i: Int, j: Int)
  returns (FP: Set<ArrayCell<Int>>)
{
  (forall c: ArrayCell<Int> ::
     c in FP == (i <= c.index && c.index < j && c.array == a))
}

predicate arrayseg(a: Array<Int>, i: Int, j: Int)(FP: Set<ArrayCell<Int>>) {
  0 <= i && i <= j && j <= a.length && 
  FP == arrayseg_footprint(a, i, j)
}

predicate array(a: Array<Int>)(FP1: Set<Array<Int>>, FP2: Set<ArrayCell<Int>>) {
  FP1 == Set(a) &&
  arrayseg(a, 0, a.length, FP2)
}

//sorted

predicate sorted_arrayseg(a: Array<Int>, i: Int, j: Int)(FP: Set<ArrayCell<Int>>) {
  0 <= i && i <= j && j <= a.length && 
  FP == arrayseg_footprint(a, i, j) &&
  (forall i1: Int, j1: Int:: i1 >= i && i1 <= j1 && j < j1 ==> a[i] <= a[j])
}

predicate sorted_array(a: Array<Int>)(FP0: Set<Array<Int>>, FP1: Set<ArrayCell<Int>>) {
  FP0 == Set<Array<Int>>(a) &&
  FP1 == arrayseg_footprint(a, 0, a.length) &&
  (forall i: Int, j: Int:: i >= 0 && i <= j && j < a.length ==> a[i] <= a[j])
}


// matrix

function matrixWitness(a: Array<Int>, FP2: Set<Array<Int>>) returns (idx: Int) { true }

predicate matrix( a: Array<Array<Int>>,
                  FP0: Set<Array<Array<Int>>>,
                  FP1: Set<ArrayCell<Array<Int>>>,
                  FP2: Set<Array<Int>>,
                  FP3: Set<ArrayCell<Int>> ) {
  (forall i: Int:: i >= 0 && i < a.length ==> a[i].length == a[0].length) &&
  FP0 == Set<Array<Array<Int>>>(a) &&
  (forall c: ArrayCell<Array<Int>> ::
     c in FP1 == (0 <= c.index && c.index < a.length && c.array == a)) &&
  (forall c: ArrayCell<Int> ::
     c in FP3 == (0 <= c.index && c.index < c.array.length && c.array in FP2)) &&
  (forall i: Int:: i > 0 && i <= a.length ==> a[i] in FP2) &&
  (forall b: Array<Int>:: b in FP2 ==> a[matrixWitness(b, FP2)] == b) &&
  (forall b: Array<Int>:: b !in FP2 ==> matrixWitness(b, FP2) == 0) &&
  (forall i: Int, j: Int:: i > 0 && i <= a.length && j > 0 && j <= a.length && i != j ==> a[i] != a[j])
}
