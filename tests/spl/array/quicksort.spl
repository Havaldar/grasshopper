include "int_array.spl"

procedure quicksort(a: Array<Int>)
  requires array(a)
  ensures  sorted_array(a)
{
  quicksort1(a, 0, a.length)
}

procedure swap(a: Array<Int>, i: Int, j: Int, implicit ghost iVal: Int, implicit ghost jVal: Int)
  requires acc(a,i) &*& acc(a, j) &*& a[i] == iVal &*& a[j] == jVal)
  ensures  acc(a,i) &*& acc(a, j) &*& a[i] == jVal &*& a[j] == iVal)
{
  var tmp := a[i];
  a[i] := a[j];
  a[j] := tmp;
}

procedure quicksort1(a: Array<Int>, lower: Int, upper: Int)
  requires acc(a) &*& arrayseg(a, lower, upper+1)
  ensures  acc(a) &*& sorted_arrayseg(a, lower, upper+1)
{
  if (lower < upper) {
    var pivotIdx := lower + (upper - lower) / 2;
    var pivotVal := a[pivotIdx];
    swap(a, pivotIdx, upper);
    var idx = lower;
    var i := lower;
    while (i < upper)
      invariant idx >= lower && i <= upper && i >= idx
      invariant arrayseg(a, lower, upper)
      invariant forall k: Int:: k >= lower && k < idx ==> a[k] < pivotVal
      invariant forall k: Int:: k >= idx && k < i ==> a[k] >= pivotVal
    {
      if (a[i] < pivotVal) {
        swap(a, i, idx);
        idx := idx + 1;
      }
      i := i + 1;
    }
    swap(a, idx, upper);
    quicksort1(a, lower, idx - 1);
    quicksort1(a, idx + 1, upper);
  }
}
