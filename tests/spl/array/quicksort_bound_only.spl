include "../include/int_array.spl";

procedure quicksort(a: Array<Int>, implicit ghost lb: Int, implicit ghost ub: Int)
  requires array_bnd(a, lb, ub)
  ensures sorted_array_bnd(a, lb, ub)
{
  quicksort1(a, 0, a.length-1, lb, ub);
}

procedure swap(a: Array<Int>, i: Int, j: Int)
  requires acc(a) &*& (acc(a, i) &+& acc(a, j))
  ensures  acc(a) &*& (acc(a, i) &+& acc(a, j)) &*& a[i] == old(a[j]) &*& a[j] == old(a[i])
{
  var tmp := a[i];
  a[i] := a[j];
  a[j] := tmp;
}

procedure quicksort1(a: Array<Int>, lower: Int, upper: Int, ghost lb: Int, ghost ub: Int)
  requires acc(a) &*& arrayseg_bnd(a, lower, upper+1, lb, ub)
  ensures  acc(a) &*& sorted_arrayseg_bnd(a, lower, upper+1, lb, ub)
{
  if (lower < upper) {
    var pivotIdx := lower + (upper - lower) / 2;
    var pivotVal := a[pivotIdx];
    swap(a, pivotIdx, upper);
    var idx := lower;
    var i := lower;
    while (i < upper)
      invariant lower <= idx && idx <= i && i <= upper
      invariant acc(a)
      invariant arrayseg_bnd(a, lower, idx, lb, pivotVal)
      invariant arrayseg_bnd(a, idx, i, pivotVal, ub)
      invariant arrayseg_bnd(a, i, upper, lb, ub)
    {
      if (a[i] < pivotVal) {
        swap(a, i, idx);
        idx := idx + 1;
      }
      i := i + 1;
    }
    swap(a, idx, upper);
    quicksort1(a, lower, idx - 1, lb, pivotVal);
    quicksort1(a, idx + 1, upper, pivotVal, ub);
  }
}
