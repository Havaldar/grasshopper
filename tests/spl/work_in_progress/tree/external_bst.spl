/* External Binary Search Tree
 *
 * Only checking memory safety.
 *
 * Status: Trying to push through contains. Haven't added content to other
 * procedures yet.
*/

include "../../include/bstree.spl";

predicate two_or_bust(FP: Set<Node>)
  requires acc(FP)
{
  forall x in FP:: (x.left == null && x.right == null) || (x.left != null && x.right != null)
}

predicate ext_tree(r: Node) {
  exists X: Set<Node> ::
    tree(r) && acc(X) &*& two_or_bust(X)
}

function leaves(X: Set<Node>) returns (L: Set<Node>)
  requires acc(X)
  ensures forall n: Node :: n in L == (n in X && n.left == null && n.right == null)
  @(matching n yields n.left) @(matching n yields n.right)
  ensures forall x: Node, y: Node :: Reach(parent, x, y) && y in L ==> x == y

predicate tree_bst_prop(FP: Set<Node>)
  requires acc(FP)
{
  (forall x in FP, y in FP :: Btwn(parent, x, y.left, y) ==> x.data < y.data
   @(matching y.left yields y.data)) &&
  (forall x in FP, y in FP :: Btwn(parent, x, y.right, y) ==> x.data >= y.data
   @(matching y.right yields y.data))  
}

predicate ext_bst_set(r: Node, C: Set<Int>) {
  exists X: Set<Node>, L: Set<Node> ::
    tree(r) && acc(X) &*& two_or_bust(X)
    &*& tree_bst_prop(X)
    &*& C == content(L) && L == leaves(X)
}

procedure contains(root: Node, val: Int, implicit ghost C: Set<Int>)
  returns (res: Bool)
  requires ext_bst_set(root, C) &*& root != null
  ensures ext_bst_set(root, C) &*& res == val in C
{
  var curr := root;
  while (curr.left != null && curr.right != null)
    invariant exists C1: Set<Int> :: acc(curr) -** ext_bst_set(curr, C1) -** ext_bst_set(root, C)
      &*& (val in C == val in C1)
  {
    if (val < curr.data)
      curr := curr.left;
    else
      curr := curr.right;
  }
  if (curr.data == val)
    return true;
  else
    return false;
}

procedure insert(root: Node, val: Int, implicit ghost C: Set<Int>)
  requires ext_bst_set(root, C) &*& root.left != null
  ensures ext_bst_set(root, C ++ {val})
{
  var par: Node := null;
  var curr := root;
  while (curr.left != null && curr.right != null)
    invariant exists C1: Set<Int> :: ext_bst_set(curr, C1) -** ext_bst_set(root, C)
    invariant curr == root && par == null || par == curr.parent
    invariant curr != null
  {
    par := curr;
    if (val < curr.data)
      curr := curr.left;
    else
      curr := curr.right;
  }

  if (curr.data != val) {
    var newExt := new Node;
    var newInt := new Node;
    newExt.left := null;
    newExt.right := null;
    newExt.parent := newInt;

    if (curr.data < val) {
      newInt.left := curr;
      newInt.right := newExt;
      newInt.data := val;
    } else {
      newInt.left := newExt;
      newInt.right := curr;
      newInt.data := curr.data;
    }
    curr.parent := newInt;

    if (par.left == curr) {
      par.left := newInt;
    } else {
      par.right := newInt;
    }
    newInt.parent := par;
  }
}

procedure delete(root: Node, val: Int)
  requires ext_tree(root)
/* Ugly cardinality constraints to avoid corner cases */
  &*& root.left != null && root.left.left != null && root.right.left != null
  ensures ext_tree(root)
{
  var gpar: Node := null;
  var par: Node := null;
  var curr := root;
  while (curr.left != null && curr.right != null)
    invariant ext_tree(curr) -** ext_tree(root)
    invariant curr == root && par == null && gpar == null
      || par == root && par == curr.parent && gpar == null
      || par == curr.parent && gpar == par.parent
    invariant curr != null
  {
    gpar := par;
    par := curr;
    if (val < curr.data)
      curr := curr.left;
    else
      curr := curr.right;
  }
  pure assert par != root;

  if (curr.data == val) {
    var sib: Node;
    if (par.left == curr) sib := par.right;
    else sib := par.left;

    if (gpar.left == par) {
      gpar.left := sib;
    } else {
      gpar.right := sib;
    }
    sib.parent := gpar;

    curr.parent := null;
    par.parent := null;
    free par;
    free curr;
  }
}
