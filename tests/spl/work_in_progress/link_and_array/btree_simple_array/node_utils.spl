include "find.spl";
include "array_utils.spl";

/* is a node full */
predicate is_full(u: Node)
  requires acc(u) &*& acc(u.keys)
{
  u.keys[b - 1] != top
}

/* is a node a leaf */
predicate is_leaf(u: Node)
  requires acc(u) &*& acc(u.children)
{
  u.children[0] == null
}

procedure get_size(u: Node) returns (res: Int)
  requires acc(u) &*& sorted_key_array(u.keys)
  ensures acc(u) &*& sorted_key_array(u.keys)
  ensures res == size(u)
{
  var lo := 0;
  var hi := u.keys.length;
  while (hi != lo)
    invariant acc(u) &*& sorted_key_array(u.keys)
    invariant u.keys.length >= hi >= lo >= 0
    invariant forall i: Int :: hi <= i < u.keys.length ==> u.keys[i] == top
    invariant forall i: Int :: 0 <= i < lo ==> u.keys[i] != top
  {
    var m := (hi + lo) / 2;
    if (u.keys[m] == top) {
      hi := m;
    } else {
      lo := m + 1;
    }
  }
  pure assume u.keys[lo] == u.keys[lo]; // needed for instantiation
  pure assert size(u) <= lo;
  return lo;
}


/* Add the value x to the node u
 * @param u     the node to insert into
 * @param x     the value to add
 * @param ci    the child associated with x
 * @return      true on success or false if x was not added
 */
procedure addNode(u: Node, x: T, ci: Node)
  requires btree(u) &*& (btree(ci) || ci == null)
  requires u != null && (ci == null || ci.parent == null && ci.lbound == x)
  requires (ci == null) == (u.children[0] == null) // inserting null iff u is a leaf
  requires x != bottom && x != top
  requires u.children[index_of_key(u.keys, x)] != null ==> lt(u.keys[index_of_key(u.keys, x)], ci.lbound)
  requires u.children[index_of_key(u.keys, x) + 1] != null ==> lt(ci.ubound, u.keys[index_of_key(u.keys, x) + 1])
  requires forall n in node_footprint(u) :: n == u || lt(n.ubound, ci.lbound) || lt(ci.ubound, n.lbound)
  requires forall i: Int :: 0 <= i < u.keys.length ==> u.keys[i] != x
  requires lt(u.lbound, x)
  requires ci == null ==> lt(x, u.ubound)
  requires ci != null ==> lt(ci.ubound, u.ubound)
  ensures btree_root_possibly_full(u)
{
  var i := findIt(u.keys, x);

  if (i < u.keys.length - 1) {
    key_arraymove(u.keys, i, i+1, b-i-1);
  }

  u.keys[i] := x;

  if (i < u.keys.length-1) {
    node_arraymove(u.children, i+1, i+2, b-i-1);
  }

  u.children[i+1] := ci;

  if (ci != null) { ci.parent := u; }
  // update bounds
  //if (i + 1 == u.keys.length || u.keys[i + 1] == top) {
    //u.ubound := x;
  //} else if (ci != null) {
    //ci.ubound := u.keys[i + 1];
  //}
}

/* Remove the i'th value from this block - don't affect this block's children
 * @param i     the index of the element to remove
 * @return      the value of the element removed
 */
procedure removeNode(u: Node, i: Int) returns (res: T)
  requires btree_root_possibly_full(u) &*& is_leaf(u)
  requires 0 <= i < u.keys.length
  //requires forall j: Int :: 0 <= j && j <= b ==> u.children[j] == null // is_leaf
  ensures btree(u) &*& is_leaf(u)
  ensures res == old(u.keys[i])
{
  var y := u.keys[i];
  key_arraymove(u.keys, i+1, i, b-i-1);
  u.keys[b-1] := top;
  pure assert size(u) < b;
  pure assume size(u) < b;
  pure assert forall n in node_footprint(u) :: size(n) < b;
  pure assume forall n in node_footprint(u) :: size(n) < b;
  return y;
}

procedure newNode() returns (res: Node)
  requires  emp
  ensures acc(res) -** btree(res)
  ensures res.parent == null && res.lbound == bottom && res.ubound == top
  ensures forall i: Int, k: Map<Node, Array<T>> :: res.k == res.keys && 0 <= i < b ==> res.k[i] == top
  ensures forall i: Int :: 0 <= i <= b ==> res.children[i] == null
{
  var w := new Node();
  w.keys := new Array<T>(b);
  w.children := new Array<Node>(b+1);
  w.parent := null;
  w.lbound := bottom;
  w.ubound := top;
  var i := 0;
  while (i < b)
    invariant 0 <= i <= b
    invariant acc(w) &*& acc(w.keys) &*& acc(w.children)
    invariant w.keys.length == b && w.children.length == b+1
    invariant forall j: Int, n: Node :: 0 <= j < i && n in {w} ==> n.keys[j] == top
    invariant forall j: Int, n: Node :: 0 <= j < i && n in {w} ==> n.children[j] == null
  {
    w.keys[i] := top;
    w.children[i] := null;
    i := i + 1;
  }
  w.children[b] := null;
  return w;
}

procedure newTree() returns (res: Node)
  requires  emp
  ensures btree_root(res)
{
  return newNode();
}
