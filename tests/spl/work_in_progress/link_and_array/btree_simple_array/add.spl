include "find.spl";
include "node_utils.spl";
include "array_utils.spl";

procedure splitNode(leftNode: Node) returns (splitValue: T, rightNode: Node)
  requires  btree_possibly_full(leftNode) &*& is_full(leftNode);
  ensures   splitValue == old(leftNode.keys[b/2])
  // state of the left node
  ensures   btree(leftNode)
  ensures   leftNode.parent == old(leftNode.parent)
  ensures   leftNode.lbound == old(leftNode.lbound) && le(leftNode.ubound, splitValue)
  ensures   forall i: Int :: 0 <= i < b/2 - 1 ==> leftNode.keys[i] == old(leftNode.keys[i])
  ensures   forall i: Int :: 0 <= i <= b/2 - 1 ==> leftNode.children[i] == old(leftNode.children[i])
  ensures   size(leftNode) == b/2 - 1;
  // state of the rightNode node
  ensures   btree(rightNode)
  ensures   rightNode.parent == null
  ensures   rightNode.ubound == old(leftNode.ubound) && lt(splitValue, rightNode.lbound)
  ensures   forall i: Int :: 0 <= i < b/2 ==> rightNode.keys[i] == old(leftNode.keys[i + b/2])
  ensures   forall i: Int :: 0 <= i <= b/2 ==> rightNode.children[i] == old(leftNode.children[i + b/2])
  ensures   size(rightNode) == b/2;
{
  rightNode := newNode();
  var j := b/2;
  // move the keys
  key_arraycopy(leftNode.keys, j, rightNode.keys, 0, j);
  key_fill(leftNode.keys, j, b, top);
  // move the children
  node_arraycopy(leftNode.children, j, rightNode.children, 0, j+1);
  node_fill(leftNode.children, j, b+1, null);
  // extract the middle value
  splitValue := leftNode.keys[j - 1];
  leftNode.keys[j - 1] := top;
  // set the bounds
  rightNode.ubound := leftNode.ubound;
  rightNode.lbound := rightNode.keys[0];
  leftNode.ubound := splitValue;
  var i := 0;
  while (i < j)
    invariant 0 <= i <= j
    //invariant ...     
  {
    rightNode.children[i].parent := rightNode;
    i := i + 1;
  }
  var FP_N: Set<Node>, FP_A_T: Set<Array<T>>, FP_A_N: Set<Array<Node>>;
  assume acc(FP_N) &*& acc(FP_A_T) &*& acc(FP_A_N);
  pure assume leftNode.keys[b/2 - 1] == leftNode.keys[b/2 - 1];
  pure assert size(rightNode) == b/2;
  pure assume size(rightNode) == b/2;
  pure assert size(leftNode) == b/2 - 1;
  pure assume size(leftNode) == b/2 - 1;
  pure assert
    (forall n in FP_N, c: Map<Node, Array<Node>>, i: Int ::  n.c == n.children && 0 <= i < n.c.length && n.c[i] != null ==>
       Reach(parent, n.c[i], n) && n.c[i] != n ) &&
    //(forall n in FP_N, c: Map<Node, Array<Node>>, m: Node, i: Int ::  n.c == n.children &&
    //   0 <= i < n.c.length && n.c[i] != null && Btwn(parent, n.c[i], m, n) ==>  m == n || n.c[i] == m) &&
    true;
  assume false;
  //assert btree_possibly_full(leftNode) -** acc(FP_N) &*& acc(FP_A_T) &*& acc(FP_A_N);
  pure assert forall i: Int :: 0 <= i < b/2 - 1 ==> leftNode.keys[i] == old(leftNode.keys[i]);
  pure assert forall i: Int :: 0 <= i <= b/2 - 1 ==> leftNode.children[i] == old(leftNode.children[i]);
  pure assume leftNode.keys[b/2 - 1] == leftNode.keys[b/2 - 1];
  pure assert size(leftNode) == b/2 - 1;
  assume false;
}

procedure addRecursive(x: T, u: Node) returns (split: T, res: Node)
  requires  btree(u)
  requires  lt(u.lbound, x) && lt(x, u.ubound)
  ensures   btree(u) &*& (btree(res) || res == null)
  ensures   u != null && u.lbound == old(u.lbound)
  ensures   res == null ==> u.ubound == old(u.ubound)
  ensures   res != null ==>
                split != bottom && res.parent == null &&
                lt(u.ubound, res.lbound) && res.ubound == old(u.ubound)
{
  var i := findIt(u.keys, x);
  if (i < u.keys.length && u.keys[i] == x) {
    //throw new DuplicateValueException();
    return top, null;
  }
  if (is_leaf(u)) { // leaf node, just add it
    addNode(u, x, null);
  } else {
    var s: T, w: Node;
    s, w := addRecursive(x, u.children[i]);
    if (w != null) {  // child was split, w is new child 
      addNode(u, s, w);
    }
  }
  if (is_full(u)) {
    var s: T, n: Node;
    s, n := splitNode(u);
    return s, n;
  } else {
    return top, null;
  }
}

procedure add(bt: Node, x: T) returns (res: Node)
  requires  btree_root(bt)
  ensures   btree_root(res)
{
  var s: T, w: Node;
  s, w := addRecursive(x, bt);
  if (w != null) {   // root was split, make new root
    var newroot := newNode();
    newroot.children[0] := bt;
    bt.parent := newroot;
    newroot.keys[0] := s;
    newroot.children[1] := w;
    w.parent := newroot;
    return newroot;
  } else {
    return bt;
  }
}
