include "def_local.spl";

/* Find the smallest value >= x in this BTree */
procedure find(bt: Node, x: T) returns (res: T)
  requires btree_root(bt) 
  requires x != bottom && x != top
  ensures btree_root(bt)
{
  var z: T := bottom;
  var n := bt;
  var flag := false;
  while (n != null && !flag)
    invariant x != bottom && x != top
    //invariant lt(n.lbound, x) && lt(x, n.ubound)
    invariant (n == null || acc(n)) -** btree_root(bt)
  {
    var i := findIt(n.keys, x);
    if (i < n.keys.length && n.keys[i] == x) {
      z := n.keys[i];
      flag := true;  /* Found x, so return */
    } else {
      /* n.keys[i] is smallest value > x, go to child[i] if exists */
      if (i < n.keys.length && n.keys[i] != top) {
        z := n.keys[i];
      }
      n := n.children[i];
    }
  }
  return z;
}

procedure findIt(a: Array<T>, x: T) returns (idx: Int)
  requires sorted_key_array(a)
  requires x != top
  ensures sorted_key_array(a)
  // what we actually care about
  ensures idx == index_of_key(a, x)
{
  var lo := 0;
  var hi := a.length;

  while (hi != lo)
    invariant x != top
    invariant sorted_key_array(a)
    // what we actually care about
    invariant 0 <= lo && lo <= hi && hi <= a.length
    invariant hi == a.length || a[lo] == x || lt(x, a[hi])
    invariant forall i: Int :: 0 <= i < lo ==> lt(a[i], x)
    invariant forall i: Int :: hi < i < a.length ==> lt(x, a[i])
  {
    var m := (hi + lo) / 2;
    var cmp: Int;
    cmp := compare(x, a[m]);
    if (cmp < 0) {
      hi := m;      // look in first half
    } else if (cmp > 0) {
      lo := m+1;    // look in second half
    } else {
      // found it
      hi := m;
      lo := m;
    }
  }
  return lo;
}
