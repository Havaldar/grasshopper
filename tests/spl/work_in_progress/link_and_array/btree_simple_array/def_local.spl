//  inspired by
//  http://opendatastructures.org/ods-java/14_2_B_Trees.html
//  under CC-BY
//  full source at http://opendatastructures.org/ods-java.tgz

type T;

predicate lt(x: T, y: T)

predicate le(x: T, y: T)

axiom forall x: T :: !lt(x, x);
axiom forall x: T, y: T :: !lt(x, y) || !lt(y, x);
axiom forall x: T, y: T :: lt(x, y) || lt(y, x) || x == y;
axiom forall x: T, y: T, z: T :: lt(x, y) && lt(y, z) ==> lt(x, z);
axiom forall x: T, y: T :: le(x, y) == (lt(x, y) || x == y);

function compare(x: T, y: T)
  returns (res: Int)
  ensures (x == y) == (res == 0)
  ensures lt(x, y) == (res < 0)
  ensures lt(y, x) == (res > 0)

var bottom: T;
var top: T;
axiom forall a: T :: !lt(a, bottom);
axiom forall a: T :: !lt(top, a);

/* The order, B, is at least 2 */
var B: Int;
var b: Int;
axiom B >= 2;
axiom b == 2*B - 1;

struct Node {
  var keys: Array<T>;
  var children: Array<Node>;

  /* NOTE: adding these */
  var ghost parent: Node;
  var ghost lbound: T;
  var ghost ubound: T;
}

/* -------------------- Predicate Definitions -------------------- */

function node_footprint(r: Node)
  returns (FP: Set<Node>)
  ensures forall x: Node :: x in FP == (Btwn(parent, x, r, r) && r != null)

function key_array_owner(a: Array<T>, FP_N: Set<Node>) returns (n: Node)
  requires acc(FP_N)
  ensures forall n in FP_N :: n == key_array_owner(n.keys, FP_N)
  ensures forall X: Set<Node>, Y: Set<Node>, n: Node ::
               n in X && n in Y ==> key_array_owner(n.keys, X) == key_array_owner(n.keys, Y) 
  
function array_int_fp(FP_N: Set<Node>)
  returns (FP_A_I: Set<Array<T>>)
  requires acc(FP_N)
  ensures forall n: Node :: n in FP_N ==> n.keys in FP_A_I
            @(matching n yields n.keys)
  ensures forall a: Array<T> :: a in FP_A_I ==> key_array_owner(a, FP_N) in FP_N && key_array_owner(a, FP_N).keys == a
            @(matching a without array_node_owner yields key_array_owner(a, FP_N).keys)
  ensures forall a: Array<T> :: a !in FP_A_I ==> key_array_owner(a, FP_N) == null

function array_node_owner(a: Array<Node>, FP_N: Set<Node>)
  returns (n: Node)
  requires acc(FP_N)
  ensures forall n in FP_N :: n == array_node_owner(n.children, FP_N)
  ensures forall X: Set<Node>, Y: Set<Node>, n: Node ::
               n in X && n in Y ==> array_node_owner(n.children, X) == array_node_owner(n.children, Y) 

function array_node_fp(FP_N: Set<Node>)
  returns (FP_A_N: Set<Array<Node>>)
  ensures forall n: Node :: n in FP_N ==> n.children in FP_A_N
            @(matching n yields n.children)
  ensures forall a: Array<Node> :: a in FP_A_N ==> array_node_owner(a, FP_N) in FP_N && array_node_owner(a, FP_N).children == a
            @(matching a without key_array_owner yields array_node_owner(a, FP_N).children)
  ensures forall a: Array<Node> :: a !in FP_A_N ==> array_node_owner(a, FP_N) == null


  /*
predicate btree_node(n: Node) {
  acc(n) &*& acc(n.keys) &*& acc(n.children) &*&
  // size of keys/children
  n.children.length == b+1 && n.keys.length == b &&
  // children arrays are partitioned into non-null/null halfs
  (forall i: Int, j: Int :: 0 <= i && i <= j && j < n.children.length && n.children[i] == null ==> n.children[j] == null) &&
  // children and keys
  (forall i: Int, j: Int ::
        0 <= i && i <= j && j < n.children.length
      ==>
        n.children[i] == null || //leaf: no children
     (n.children[j] != null || n.keys[j] == top)) && //non-leaf: child entry is null then, so is the corresponding key entry
  (forall i: Int, j: Int :: 0 <= i && i < n.keys.length && 0 <= j && j < n.children.length &&
                            n.keys[i] == top && j > i ==> n.children[j] == null) &&
  // the keys are sorted
  (forall i: Int, j: Int :: 0 <= i && i <  j && j < n.keys.length ==> lt(n.keys[i], n.keys[j])) &&
  // key bounds of nodes are consistent
  le(n.lbound, n.ubound) &&
  // keys and lbound, ubound
  (forall i: Int :: i <= 0 && i < n.keys.length && n.keys[i] != top ==> lt(n.lbound, n.keys[i]) && lt(n.keys[i], n.ubound))
}
  */
  
// Returns size of n, i.e. index of first top-valued key entry of node n
function size(n: Node) returns (res: Int)
  requires acc(n) &*& acc(n.keys)
  ensures res < n.keys.length ==> n.keys[res] == top 
  ensures 0 <= res <= n.keys.length
  ensures forall i: Int :: 0 <= i < res ==> n.keys[i] != top @(matching n yields n.keys[res]) @(matching n yields n.keys[0])

predicate sorted_key_array(a: Array<T>)
{
  acc(a) &*&
  (forall i: Int, j: Int :: 0 <= i < j < a.length ==> a[j] == top || lt(a[i], a[j])) &&
  a.length > 0
}

// Returns index of key x in array a, if a contains x.
// Otherwise, returns the index of the smallest key in a that is larger than x.
function index_of_key(a: Array<T>, x: T) returns (idx: Int)
  requires sorted_key_array(a)
  requires x != bottom && x != top
  ensures 0 <= idx && idx <= a.length
  ensures idx == a.length || a[idx] == x || lt(x, a[idx])
  ensures forall i: Int :: 0 <= i && i < idx ==> lt(a[i], x)
  ensures forall i: Int :: idx < i && i < a.length ==> lt(x, a[i])


  
predicate btree_possibly_full(bt: Node) {
  exists FP_N: Set<Node>, FP_A_I: Set<Array<T>>, FP_A_N: Set<Array<Node>> ::
    acc(FP_N) &*& acc(FP_A_I) &*& acc(FP_A_N) &*&
    bt != null &&
    FP_N == node_footprint(bt) &&
    FP_A_I == array_int_fp(FP_N) &&
    FP_A_N == array_node_fp(FP_N) &&
 
    /* keys and children arrays are of size 2B */
    (forall n: Node :: n in FP_N ==> n.children.length == b+1 && n.keys.length == b) &&
  
    /* Structural properties of arrays */
    // children arrays are partitioned into non-null/null halfs
    (forall n in FP_N, i: Int, j: Int :: 0 <= i <= j < n.children.length && n.children[i] == null ==> n.children[j] == null) &&
    // children and keys
    // if a node is not a leaf, all its children before first_top are non-null
    (forall n in FP_N, i: Int, j: Int :: 0 <= i < j < n.children.length ==>
        n.children[i] == null || n.children[j] != null || size(n) < j
     @(matching n yields n.keys[size(n)])) &&
    // all children after a top key are null
    (forall n in FP_N, i: Int, j: Int :: 0 <= i < j < n.children.length &&
                                          n.keys[i] == top ==> n.children[j] == null) &&
    // the keys are sorted
    (forall n in FP_N, i: Int, j: Int :: 0 <= i < j < n.keys.length ==> n.keys[j] == top || lt(n.keys[i], n.keys[j])) &&
    
    /* Tree invariants */
    // parent is inverse of child array 
    (forall n in FP_N, i: Int :: 0 <= i < n.children.length && n.children[i] != null ==>
        Reach(parent, n.children[i], n) && n.children[i] != n ) &&
    (forall n in FP_N, m: Node, i: Int :: 0 <= i < n.children.length && n.children[i] != null && Btwn(parent, n.children[i], m, n) ==>
        m == n || n.children[i] == m) &&
    // key and children arrays are all distinct
    (forall n in FP_N, m in FP_N :: n == m || n.keys != m.keys) &&
    (forall n in FP_N, m in FP_N :: n == m || n.children != m.children) &&
    // child array entries are all distinct
    (forall n in FP_N, i: Int, j: Int :: 0 <= i < j < n.children.length ==> n.children[i] == null || n.children[i] != n.children[j]) &&
    // ancestor nodes must be reachable via correct child
    (forall n in FP_N, m in FP_N, i: Int :: 0 <= i < m.children.length && m.children[i] != null && Reach(parent, n, m) &&
       n != m && le(m.children[i].lbound, n.lbound) && le(n.ubound, m.children[i].ubound) ==>
         Btwn(parent, n, m.children[i], m) @(matching n yields n.lbound) @(matching n yields n.ubound)) &&  
    // keys of ancestor nodes include keys of decendants
    (forall n in FP_N, m in FP_N :: Reach(parent, n, m) ==> le(m.lbound, n.lbound) && le(n.ubound, m.ubound)) &&
    // key bounds of nodes are consistent
    (forall n in FP_N :: le(n.lbound, n.ubound)) &&
    // keys and lbound, ubound
    (forall n in FP_N, i: Int :: 0 <= i < n.keys.length && n.keys[i] != top ==> le(n.lbound, n.keys[i]) && le(n.keys[i], n.ubound)) &&
    // children lbound, ubound, and keys
    (forall n in FP_N, i: Int, j: Int :: 0 <= i <= j < n.keys.length && n.children[i] != null ==> lt(n.children[i].ubound, n.keys[j])) &&
    (forall n in FP_N, i: Int, j: Int :: 0 <= i < j < n.keys.length && n.children[j] != null ==> lt(n.keys[i], n.children[j].lbound)) &&
    //(forall n in FP_N, m in FP_N :: first_top(n) > 0 && Reach(parent, m, n) ==> m == n || lt(m.ubound, n.keys[first_top(n)])) &&
    (forall n in FP_N, m in FP_N :: n.children[0] == null && Reach(parent, m, n) ==> n == m) && 
    // ...
    
    true
}

predicate btree_root_possibly_full(bt: Node) {
  btree_possibly_full(bt) &*&
  (forall n in node_footprint(bt) :: n == bt || size(n) < b)
}

predicate btree(bt: Node) {
  btree_possibly_full(bt) &*&
  (forall n in node_footprint(bt) :: size(n) < b)
}


predicate btree_root(root: Node) {
  btree(root) &*&
  root.lbound == bottom &&
  root.ubound == top
}

