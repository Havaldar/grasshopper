//  inspired by
//  http://opendatastructures.org/ods-java/14_2_B_Trees.html
//  under CC-BY
//  full source at http://opendatastructures.org/ods-java.tgz

type T;

predicate lt(x: T, y: T)

predicate le(x: T, y: T)

axiom forall x: T :: !lt(x, x);
axiom forall x: T, y: T :: !lt(x, y) || !lt(y, x);
axiom forall x: T, y: T :: lt(x, y) || lt(y, x) || x == y;
axiom forall x: T, y: T, z: T :: lt(x, y) && lt(y, z) ==> lt(x, z);
axiom forall x: T, y: T :: le(x, y) == (lt(x, y) || x == y);

function compare(x: T, y: T)
  returns (res: Int)
  ensures (x == y) == (res == 0)
  ensures lt(x, y) == (res < 0)
  ensures lt(y, x) == (res > 0)

var bottom: T;
axiom forall a: T :: !lt(a, bottom);

/* The order, B, is at least 2 */
var B: Int;
var b: Int;
axiom B >= 2;
axiom b == 2*B - 1;

struct Node {
  var keys: Array<T>;
  var children: Array<Node>;

  /* NOTE: adding these */
  var ghost parent: Node;
  var ghost is_leaf: Bool;
  var ghost lbound: T;
  var ghost ubound: T;
}

/* -------------------- Predicate Definitions -------------------- */

function key_arrayseg_fp(a: Array<T>, i: Int, j: Int)
  returns (FP: Set<ArrayCell<T>>)
  ensures forall c: ArrayCell<T> :: c in FP == (i <= c.index && c.index < j && c.array == a)

predicate key_arrayseg(a: Array<T>, i: Int, j: Int) {
  0 <= i && i <= j && j <= a.length &*&
  acc(key_arrayseg_fp(a, i, j))
}

predicate sorted_key_arrayseg(a: Array<T>, i: Int, j: Int) {
  acc(key_arrayseg_fp(a, i, j)) &*&
  0 <= i && i <= j && j <= a.length &&
  (forall k: Int, l: Int:: k >= i && k <= l && l < j ==> lt(a[k], a[l]))
}

function node_arrayseg_fp(a: Array<Node>, i: Int, j: Int)
  returns (FP: Set<ArrayCell<Node>>)
  ensures forall c: ArrayCell<Node> :: c in FP == (i <= c.index && c.index < j && c.array == a)

predicate node_arrayseg(a: Array<Node>, i: Int, j: Int) {
  0 <= i && i <= j && j <= a.length &*&
  acc(node_arrayseg_fp(a, i, j))
}

function node_footprint(r: Node)
  returns (FP: Set<Node>)
  ensures forall x: Node :: x in FP == (Btwn(parent, x, r, r) && r != null)

function key_array_owner(a: Array<T>, FP_N: Set<Node>) returns (n: Node)

function array_int_fp(FP_N: Set<Node>)
  returns (FP_A_I: Set<Array<T>>)
  ensures forall n: Node :: n in FP_N ==> n.keys in FP_A_I
            @(matching n yields n.keys)
  ensures forall a: Array<T> :: a in FP_A_I ==> key_array_owner(a, FP_N) in FP_N && key_array_owner(a, FP_N).keys == a
            @(matching a without array_node_owner yields key_array_owner(a, FP_N).keys)

function array_node_owner(a: Array<Node>, FP_N: Set<Node>)
  returns (n: Node)

function array_node_fp(FP_N: Set<Node>)
  returns (FP_A_N: Set<Array<Node>>)
  ensures forall n: Node :: n in FP_N ==> n.children in FP_A_N
            @(matching n yields n.children)
  ensures forall a: Array<Node> :: a in FP_A_N ==> array_node_owner(a, FP_N) in FP_N && array_node_owner(a, FP_N).children == a
            @(matching a without key_array_owner yields array_node_owner(a, FP_N).children)

function arraycell_int_fp(FP_A_I: Set<Array<T>>)
  returns (FP_AC_I: Set<ArrayCell<T>>)
  ensures forall a: Array<T>, ac: ArrayCell<T> :: a in FP_A_I && ac in key_arrayseg_fp(a, 0, a.length) ==> ac in FP_AC_I
            @(matching a yields key_arrayseg_fp(a, 0, a.length))
  ensures forall ac: ArrayCell<T> :: ac in FP_AC_I ==> ac.array in FP_A_I

function arraycell_node_fp(FP_A_N: Set<Array<Node>>)
  returns (FP_AC_N: Set<ArrayCell<Node>>)
  ensures forall a: Array<Node>, ac: ArrayCell<Node> :: a in FP_A_N && ac in node_arrayseg_fp(a, 0, a.length) ==> ac in FP_AC_N
            @(matching a yields node_arrayseg_fp(a, 0, a.length))
  ensures forall ac: ArrayCell<Node> :: ac in FP_AC_N ==> ac.array in FP_A_N

predicate btree_node(n: Node) {
  exists FP_AC_I: Set<ArrayCell<T>>, FP_AC_N: Set<ArrayCell<Node>> ::
    acc(n) &*& acc(n.keys) &*& acc(n.children) &*& acc(FP_AC_I) &*& acc(FP_AC_N) &*&
    FP_AC_I == arraycell_int_fp(Set(n.keys)) &&
    FP_AC_N == arraycell_node_fp(Set(n.children)) &&
    // size of keys/children
    n.children.length == b+1 && n.keys.length == b &&
    // keys arrays are partitioned into non-null/null halfs
    (forall i: Int, j: Int :: 0 <= i && i <= j && j < n.keys.length && n.keys[i] == bottom ==> n.keys[j] == bottom) &&
    // children arrays are partitioned into non-null/null halfs
    (forall i: Int, j: Int :: 0 <= i && i <= j && j < n.children.length && n.children[i] == null ==> n.children[j] == null) &&
    // if a child entry is null then, so is the corresponding key entry
    (forall i: Int :: 0 <= i && i < n.keys.length && n.children[i] == null ==> n.keys[i] == bottom) &&
    // if a key entry is null, then it is either the first null entry in the key array or the corresponding child entry is also null
    (forall i: Int, j: Int :: 0 <= i && i < j && j < n.keys.length && n.keys[i] == bottom && n.keys[j] == bottom ==> n.children[j] == null) && 
    // the keys are sorted
    (forall i: Int, j: Int :: 0 <= i && i <= j && j < n.keys.length ==> n.keys[i] == bottom || n.keys[j] == bottom || lt(n.keys[i], n.keys[j]))
}

predicate btree(bt: Node) {
  exists FP_N: Set<Node>, FP_A_I: Set<Array<T>>, FP_AC_I: Set<ArrayCell<T>>, FP_A_N: Set<Array<Node>>, FP_AC_N: Set<ArrayCell<Node>> ::
    acc(FP_N) &*& acc(FP_A_I) &*& acc(FP_AC_I) &*& acc(FP_A_N) &*& acc(FP_AC_N) &*&
    FP_N == node_footprint(bt) &&
    FP_A_I == array_int_fp(FP_N) &&
    FP_AC_I == arraycell_int_fp(FP_A_I) &&
    FP_A_N == array_node_fp(FP_N) &&
    FP_AC_N == arraycell_node_fp(FP_A_N) &&
 
    /* keys and children arrays are of size 2B */
    (forall n: Node :: n in FP_N ==> n.children.length == b+1 && n.keys.length == b) &&
  
    /* Structural properties of arrays */
    // keys arrays are partitioned into non-null/null halfs
    (forall a in FP_A_I, i: Int, j: Int :: 0 <= i && i <= j && j < a.length && a[i] == bottom ==> a[j] == bottom) &&
    // children arrays are partitioned into non-null/null halfs
    (forall a in FP_A_N, i: Int, j: Int :: 0 <= i && i <= j && j < a.length && a[i] == null ==> a[j] == null) &&
    // if a child entry is null then, so is the corresponding key entry
    (forall n in FP_N, i: Int :: 0 <= i && i < n.keys.length && n.children[i] == null ==> n.keys[i] == bottom) &&
    // if a key entry is null, then it is either the first null entry in the key array
    // or the corresponding child entry is also null
    (forall n in FP_N, i: Int, j: Int :: 0 <= i && i < j && j < n.keys.length && n.keys[i] == bottom && n.keys[j] == bottom ==> n.children[j] == null) && 
    // the keys are sorted
    (forall a in FP_A_I, i: Int, j: Int :: 0 <= i && i <= j && j < a.length ==> a[i] == bottom || a[j] == bottom || lt(a[i], a[j])) &&
    
    /* Tree invariants */
    // parent is inverse of child array 
    (forall c in FP_AC_N :: c[] == null || Reach(parent, c[], array_node_owner(c.array, FP_N)) && c[] != array_node_owner(c.array, FP_N)) &&
    (forall c in FP_AC_N, x: Node :: Btwn(parent, c[], x, array_node_owner(c.array, FP_N)) ==> x == array_node_owner(c.array, FP_N) || c[] == x) &&
    // child array entries are all distinct
    (forall c in FP_AC_N, d in FP_AC_N :: c[] == d[] ==> c == d || c[] == null) &&
    // ancestor nodes must be reachable via correct child
    (forall x in FP_N, c in FP_AC_N :: Reach(parent, x, array_node_owner(c.array, FP_N)) && le(c[].lbound, x.lbound) && le(x.ubound, c[].ubound) ==>
     Btwn(parent, x, c[], array_node_owner(c.array, FP_N)) @(matching x yields x.lbound) @(matching x yields x.ubound)) &&
    // keys of ancestor nodes include keys of decendants
    (forall x in FP_N, y in FP_N :: Reach(parent, x, y) ==> le(y.lbound, x.lbound) && le(x.ubound, y.ubound)) &&
    // keys of children are disjoint
    (forall c in FP_AC_N, d in FP_AC_N :: c.index < d.index && c.array == d.array ==> lt(c[].ubound, d[].lbound)) &&
    // key bounds of nodes are consistent
    (forall x in FP_N :: le(x.lbound, x.ubound)) &&
    // ...TODO
    
    true
}
