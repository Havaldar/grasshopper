struct Node {
  var next: Node;
  var prev: Node;
}

predicate dlseg(x: Node, u: Node, y: Node, v: Node) {
  x == y && u == v || 
  x != y &*& x.prev == u &*& acc(x) &*& dlseg(x.next, x, y, v)
}

procedure dl_insert(a: Node, b: Node, elt: Node) returns (c: Node, d: Node)
    requires dlseg(a, null, null, b) &*& elt.next |-> null;
    ensures dlseg(c, null, null, d);
{
  if (a == null) {
    elt.prev := null;
    return elt, elt;
  } else {
    var curr: Node, prv: Node;
    c, d := a, b;
    curr := c;
    prv := null;
    var nondet: Bool;
    while (nondet && curr.next != null) 
      invariant curr != null &*& dlseg(c, null, curr, prv) &*& dlseg(curr, prv, null, d);
    {
      prv := curr;
      curr := curr.next;
      havoc nondet;
    }
    elt.next := curr;
    curr.prev := elt;
    if (prv != null) {
      prv.next := elt;
    } else {
      c := elt;
    }
    elt.prev := prv;
    return c, d;
  }
}
