include "../include/sllist_rec.spl";

procedure traverse(x: Node)
  requires lseg(x, null)
  ensures lseg(x, null)
{
  assert lseg(x, null);
  var y := x;

  while (y != null)
    invariant lseg(x, y) &*& lseg(y, null)
  {
    y := y.next;
  }
}

procedure copy(lst: Node) returns (res: Node)
  requires lseg(lst, null)
  ensures lseg(lst, null) &*& lseg(res, null)
{
  var curr, cp: Node := lst, null;
  while (curr != null) 
    invariant lseg(lst, curr) &*& lseg(curr, null)
    invariant lseg(cp, null)
  {
    var old_cp := cp;
    cp := new Node;
    cp.next := old_cp;
    curr := curr.next;
  }
  return cp;
}

procedure reverse(lst: Node) 
  returns (rev: Node)
  requires lseg(lst, null)
  ensures lseg(rev, null)
{
  rev := null;
  var curr := lst;
  while (curr != null) 
    invariant lseg(rev, null)
    invariant lseg(curr, null)
  {
    var tmp := curr;
    curr := curr.next;
    tmp.next := rev;
    rev := tmp;
  }
}

procedure filter(x: Node) returns (res: Node)
  requires lseg(x, null)
  ensures lseg(res, null)
{
  var prv: Node, curr := null, x;
  res := x;
  while (curr != null) 
    invariant (prv.next |-> curr &*& lseg(res, prv) || prv == null &*& res == curr) &*& lseg(curr, null);
  {
    var old_curr := curr;
    curr := curr.next; 
    var nondet: Bool;
    if (nondet) {
      if (prv != null) {
        prv.next := old_curr.next;
      } else {
        res := old_curr.next;
      }
      free old_curr;
    } else {
      prv := old_curr;
    }
  }
}

