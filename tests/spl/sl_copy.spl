struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  x == y || x != y &*& x &*& lseg(x.next, y)
}

procedure copy(lst: Node) returns (res: Node)
  requires lseg(lst, null);
  ensures lseg(lst, null) &*& lseg(res, null);
{
  var curr: Node, cp: Node;
  curr := lst;
  cp := null;
  while (curr != null) 
    invariant lseg(lst, curr) &*& lseg(curr, null) &*& lseg(cp, null);
  {
    var old_cp: Node;
    old_cp := cp;
    cp := new Node;
    cp.next := old_cp;
    curr := curr.next;
  }
  return cp;
}
