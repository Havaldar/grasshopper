struct Node {
  var next: Node;
  var prev: Node;
  var data: Int;
}

// singly-linked list segment (over field f)
predicate lseg(f: Map<Node, Node>, x: Node, y: Node) {
  Reach(f, x, y) &*& acc({ z: Node :: z != y && Btwn(f, x, z, y) })
}

// doubly-linked list segment (over next and prev)
predicate dlseg(x1: Node, x2: Node, y1: Node, y2: Node) {
  acc({ z: Node :: Btwn(next, x1, z, y1) && z != y1}) &*&
   (x1 == y1 && x2 == y2 ||
   //x1 in FP && y2 in FP &&
   x1 != x2 && y1 != y2 &&
   Btwn (next, x1, y2, y1) &&
   Btwn (prev, y2, x1, x2) &&
   //y2.next == y1 &&
   (forall l1: Node :: Btwn(next, y2, l1, y1) ==> l1 == y2 || l1 == y1) &&
   //x1.prev == x2 &&
   (forall l1: Node :: Btwn(prev, x1, l1, x2) ==> l1 == x1 || l1 == x2) &&
   (forall l1: Node, l2: Node :: 
     Btwn(next, x1, l1, y1) && Btwn(next, x1, l2, y1) && Btwn(next, l1, l2, y1) ==>
       l2 == y1 || Btwn(prev, y2, l2, l1) && Btwn(prev, l2, l1, x1)) &&
   (forall l1: Node, l2: Node ::
     Btwn(prev, y2, l1, x2) && Btwn(prev, y2, l2, x2) && Btwn(prev, l1, l2, x2) ==>
       l2 == x2 || Btwn(next, x1, l2, l1) && Btwn(next, l2, l1, y1)))
}

// a doubly-linked list is a singly-linked list over both next and prev
procedure entails1(a: Node, b: Node, c: Node, d: Node)
  requires dlseg(a, b, c, d)
  ensures lseg(next, a, c) && lseg(prev, d, b)
{
}


predicate lseg_lowerbound(lb: Int, FP: Set<Node>)
  requires acc(FP)
{
  forall z: Node :: z in FP ==> lb <= z.data
}

predicate lseg_upperbound(ub: Int, FP: Set<Node>)
  requires acc(FP)
{
  forall z: Node :: z in FP ==> z.data <= ub
}

// bounded singly-linked list segment (over next)
predicate blseg(x: Node, y: Node, lb: Int, ub: Int) {
  exists X: Set<Node> ::
    lseg(next, x, y) && acc(X) &*&
    lseg_lowerbound(lb, X) &&
    lseg_upperbound(ub, X)
}

function data_witness(v: Int, d: Map<Node, Int>, FP: Set<Node>) returns (res: Node) 

function content(FP: Set<Node>, d: Map<Node, Int>) returns (C: Set<Int>)


axiom forall FP: Set<Node>, d: Map<Node, Int>, x in FP :: x == data_witness(x.d, d, FP);

axiom forall FP: Set<Node>, d: Map<Node, Int>, x in FP :: x.d in content(FP, d);

axiom forall FP: Set<Node>, d: Map<Node, Int>, v in content(FP, d) :: data_witness(v, d, FP) in FP;

axiom forall FP: Set<Node>, d: Map<Node, Int>, v: Int :: v !in content(FP, d) ==> data_witness(v, d, FP) == null;

axiom forall FP: Set<Node>, d: Map<Node, Int>, v in content(FP, d) :: v == data_witness(v, d, FP).d
  @(matching v, content(FP, d) yields data_witness(v, d, FP).d);


/*
{ v: Int :: exists x: Node :: x in FP && x.data == v }

-->

  forall v in C :: f(v, data, FP) in FP && f(v, data, FP).data == v
  forall x, v :: x in FP && x.data == v ==> v in C
*/
 
predicate list_set(x: Node, y: Node, C: Set<Int>) {
  exists X: Set<Node> ::
    lseg(next, x, y) && acc(X) &*&
    lseg_strictly_increasing(x, X) && C == content(X, data)
}

predicate lseg_strictly_increasing(x: Node, FP: Set<Node>)
  requires acc(FP)
{
  forall y in FP, z in FP :: Btwn(next,x,y,z) ==> y.data < z.data || y == z
}

procedure entails2(a: Node, b: Node, c: Node, C: Set<Int>, C1: Set<Int>, C2: Set<Int>)
  requires list_set(a, b, C)
  ensures list_set(a, b, C) &*& (a == b || a.data in C)
{
}

procedure entails3(a: Node, b: Node, c: Node, C: Set<Int>, C1: Set<Int>, C2: Set<Int>)
  requires list_set(a, c, C) && (list_set(a, b, C1) &*& list_set(b, c, C2))
  ensures list_set(a, c, C) &*& C == C1 ++ C2
{
}

procedure entails4(a: Node, b: Node, c: Node, C1: Set<Int>, C2: Set<Int>)
  requires list_set(a, b, C1) &*& list_set(b, c, C2) &*& acc(c) &*& b != c
  requires forall d in C1 :: d < c.data
  requires forall d in C2 :: b.data < d
  ensures list_set(a, c, C1 ++ C2) &*& acc(c)
{
}

// invalid entailment (use option -model to generate a counterexample)
procedure false_entails1(a: Node, b: Node, c: Node, C1: Set<Int>, C2: Set<Int>)
  requires list_set(a, b, C1) &*& list_set(b, c, C2)
  ensures list_set(a, c, C1 ++ C2)
{
}

