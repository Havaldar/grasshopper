struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  x == y || x != y &*& acc(x) &*& lseg(x.next, y)
}

procedure remove(lst: Node) returns (res: Node)
  requires lseg(lst, null);
  ensures lseg(res, null);
{
  if (lst == null)
    return null;
  else {
    var nondet: bool, curr: Node;
    curr := lst;
    while (nondet && curr.next != null) 
      invariant curr != null;
      invariant lseg(lst, curr);
      invariant lseg(curr, null);
    {
      havoc nondet;
      curr := curr.next;
    }
    var tmp: Node;
    tmp := curr.next;
    if (tmp == null) {
    } else {
      curr.next := tmp.next;
      free(tmp);
    }
    return lst;
  }
}
