//  inspired by
//  http://www.amittai.com/prose/bplustree.html
//  under GPL v3
/*  Author:  Amittai Aviram
 *    http://www.amittai.com
 *    amittai.aviram@gmail.edu or afa13@columbia.edu
 *    Senior Software Engineer
 *    MathWorks, Inc.
 *    3 Apple Hill Drive
 *    Natick, MA 01760
 *  Original Date:  26 June 2010
 *  Last modified: 15 April 2014
 */
include "../include/btree.spl";

/* Type representing a node in the B+ tree.
 * This type is general enough to serve for both the leaf and the internal node.
 * The heart of the node is the array  of keys and the array of corresponding pointers.
 * The relation between keys and pointers differs between leaves and internal nodes.
 * In a leaf, the index of each key equals the index of its corresponding pointer, with a maximum of order - 1 key-pointer pairs..
 * The last pointer points to the leaf to the right (or null in the case of the rightmost leaf).
 * In an internal node, the first pointer refers to lower nodes with keys less than the smallest key in the keys array.
 * Then, with indices i starting at 0, the pointer at i + 1 points to the subtree with keys greater than or equal to the key in this node at index i.
 * The num_keys field is used to keep track of the number of valid keys.
 * In an internal node, the number of valid pointers is always num_keys + 1.
 * In a leaf, the number of valid pointers to data is always num_keys.
 * The last leaf pointer points to the next leaf.
 */

/* Finds keys and their pointers, if present, in the range specified
 * by key_start and key_end, inclusive.  Places these in the arrays
 * returned_keys and returned_pointers, and returns the number of
 * entries found.
 */
procedure find_range( tree: BPTree,
                      key_start: Int,
                      key_end: Int,
                      returned_keys: Array<Int>,
                      returned_data: Array<Int>)
  returns (res: Int)
  requires btree(tree)
  requires key_start <= key_end
  requires acc(returned_keys) &*& int_arrayseg(returned_keys, 0, key_end-key_start)
  requires acc(returned_data) &*& int_arrayseg(returned_data, 0, key_end-key_start)
  ensures  btree(tree)
  requires acc(returned_keys) &*& int_arrayseg(returned_keys, 0, key_end-key_start)
  requires acc(returned_data) &*& int_arrayseg(returned_data, 0, key_end-key_start)
  ensures  res < key_end-key_start
  ensures  forall i: Int :: i >= 0 && i < res ==> returned_keys[i] >= key_start && returned_keys[i] <= key_end
  //TODO returned_keys and returned_data are a projection of the tree on the given key range
{
    var root: Node = tree.root;
    var i: Int;
    var num_found: Int := 0;
    var n: Node := find_leaf( root, key_start);
    if (n == null)
      return 0;
    i := 0;
    while (i < n.num_keys && n.keys[i] < key_start)
      invariant i >= 0
      invariant int_arrayseg(n.keys, 0, n.num_keys)
    {
      i := i + 1;
    }
    if (i == n.num_keys)
      return 0;
    while (n != null)
      invariant (n == null || acc(n)) -** btree(tree)
      invariant n == null || (n.is_leaf && n.keys[i] >= key_start)
      invariant i >= 0 && (n == null || i < n.num_keys)
      invariant acc(returned_keys) &*& int_arrayseg(returned_keys, 0, key_end-key_start)
      invariant acc(returned_data) &*& int_arrayseg(returned_data, 0, key_end-key_start)
      invariant forall i: Int :: i >= 0 && i < res ==> returned_keys[i] >= key_start && returned_keys[i] <= key_end
    {
      while (i < n.num_keys && n.keys[i] <= key_end)
        invariant i >= 0
        invariant acc(n) &*& int_arrayseg(n.keys, 0, n.num_keys) &*& int_arrayseg(n.data, 0, n.num_keys)
        invariant (n.is_leaf && n.keys[i] >= key_start)
        invariant num_found < key_end-key_start
        invariant acc(returned_keys) &*& int_arrayseg(returned_keys, 0, key_end-key_start)
        invariant acc(returned_data) &*& int_arrayseg(returned_data, 0, key_end-key_start)
        invariant forall i: Int :: i >= 0 && i < res ==> returned_keys[i] >= key_start && returned_keys[i] <= key_end
      {
        returned_keys[num_found] := n.keys[i];
        returned_data[num_found] := n.data[i];
        num_found := num_found + 1;
        pure assume(num_found < key_end-key_start); //TODO we don't count yet
        i := i + 1;
      }
      n := n.pointers[tree.order - 1];
      i := 0;
    }
    return num_found;
}


/* Traces the path from the root to a leaf, searching by key.
 * Returns the leaf containing the given key.
 */
procedure find_leaf(t: BTree, key: Int) returns (res: Node)
  requires btree(t)
  ensures  (res == null || acc(res)) -** btree(t)
  ensures  res == null || res.is_leaf
  //TODO if the key is in the tree then res.key[0] >= key && res.keys[res.num_keys-1] <= key
{
  var i: Int := 0;
  var c: Node := t.root;
  if (c == null) {
    return c;
  }
  while (!c.is_leaf)
    invariant acc(c) -** btree(t)
    //TODO about the key
  {
    i := 0;
    while (i < c.num_keys && key >= c.keys[i])
      invariant acc(c) -** btree(t)
      invariant i >= 0 && i <= c.num_keys
      //TODO about the key
    {
      i := i + 1;
    }
    c := c.pointers[i];
  }
  return c;
}


/* Finds and returns the record to which a key refers. */
procedure find( t: BTree, key: Int) returns (res: Int)
  requires  btree(t)
  ensures   btree(t) //TODO did we find the key? is -1 a good Not_found ?
{
  var i: Int := 0;
  var c: Node := find_leaf( t, key);
  if (c == null)
    return -1;

  while(i < c.num_keys && c.keys[i] != key)
    invariant i >= 0 && i <= c.num_keys
    invariant acc(c) -** btree(t)
  {
    i := i + 1;
  }

  if (i == c.num_keys)
    return -1;
  else
    return c.data[i];
}

/* Finds the appropriate place to split a node that is too big into two. */
procedure cut( length: Int ) returns (res: Int)
  requires  length > 2
  ensures   res <= length/2 + 1 && res >= length/2
{
  if (length % 2 == 0)
    return length/2;
  else
    return length/2 + 1;
}


// INSERTION

/* Creates a new general node, which can be adapted
 * to serve as either a leaf or an internal node. */
procedure make_node(order: Int) returns (res: Node)
  requires  order >= 3
  ensures   btree_node(order, res) &*& !res.is_leaf
{
  var new_node := new Node;
  new_node.keys := new Array<Int>(order-1);
  new_node.data := new Array<Int>(order-1);
  new_node.pointers := new Array<Node>(order);
  new_node.is_leaf := false;
  new_node.num_keys := 0;
  new_node.parent := null;
  return new_node;
}

/* Creates a new leaf by creating a node and then adapting it appropriately. */
procedure make_leaf(order: Int) returns (res: Node)
  requires  order >= 3
  ensures   sub_btree(order, res) &*& res.is_leaf
{
  var leaf: Node := make_node(order);
  leaf.is_leaf := true;
  return leaf;
}


/* Helper function used in insert_into_parent
 * to find the index of the parent's pointer to
 * the node to the left of the key to be inserted.
 */
procedure get_left_index(parent: Node, left: Node, ghost order: Int) returns (res: Node)
  requires  sub_btree(order, parent) &*& left.parent == parent
  ensures   sub_btree(order, parent) &*& left.parent == parent &*& parent.pointer[res] == left
{
  var left_index: Int := 0;
  while (left_index <= parent.num_keys && parent.pointers[left_index] != left)
    invariant well_formed_node(order, parent)
    invariant left_index >= 0 && left_index < parent.num_keys
    invariant forall i: Int:: i >= 0 && i < left_index ==> parent.pointers[i] != left
  {
    left_index := left_index + 1;
  }
  return left_index;
}

/* Inserts a new pointer to a record and its corresponding key into a leaf.
 * Returns the altered leaf. */
procedure insert_into_leaf(leaf: Node, key: Int, value: Int, ghost order: Int) returns (res: Node)
  requires  sub_btree(order, leaf) &*& leaf.is_leaf &*& leaf.num_keys < order - 1
  requires  forall i: Int:: i >= 0 && i < leaf.num_keys ==> leaf.keys[i] != key
  ensures   sub_btree(order, leaf) &*& leaf.is_leaf
{

  var i: Int;
  var insertion_point: Int;

  insertion_point := 0;
  while (insertion_point < leaf.num_keys && leaf.keys[insertion_point] < key)
    invariant insertion_point >= 0 && insertion_point <= leaf.num_keys
    invariant int_arrayseg(leaf.keys, 0, leaf.num_keys)
    invariant forall i: Int:: i >= 0 && i < insertion_point ==> leaf.keys[i] < key 
  {
    insertion_point := insertion_point + 1;
  }

  i := leaf.num_keys;
  while(i > insertion_point)
    invariant ???
  {
    leaf.keys[i] := leaf.keys[i - 1];
    leaf.data[i] := leaf.data[i - 1];
    i := i - 1;
  }

  leaf.keys[insertion_point] := key;
  leaf.data[insertion_point] := value;
  leaf.num_keys := leaf.num_keys + 1;
  return leaf;
}


/* Inserts a new key and pointer to a new record into a leaf so as to exceed
 * the tree's order, causing the leaf to be split in half. */
procedure insert_into_leaf_after_splitting(root: Node, leaf: Node, key: Int, value: Int)
  returns (res: Node)
  requires  ???
  ensures   ???
{

  var new_leaf: Node;
  var temp_keys: Array<Int>;
  var temp_data: Array<Int>;
  var insertion_index: Int;
  var split: Int
  var new_key: Int
  var i: Int;
  var j: Int;

  new_leaf := make_leaf();

  temp_keys := new Array<Int>(order);

  temp_data := new Array<Int>(order);

  insertion_index := 0;
  while (insertion_index < order - 1 && leaf.keys[insertion_index] < key)
    invariant ??? ;
  {
    insertion_index := insertion_index + 1;
  }

  i := 0;
  j := 0;
  while (i < leaf.num_keys)
    invariant ??? ;
  {
    if (j == insertion_index)
      j := j + 1;
    temp_keys[j] := leaf.keys[i];
    temp_data[j] := leaf.data[i];
    i := i + 1;
    j := j + 1;
  }

  temp_keys[insertion_index] := key;
  temp_data[insertion_index] := value;

  leaf.num_keys := 0;

  split := cut(order - 1);

  i := 0;
  while (i < split)
    invariant ??? ;
  {
    leaf.data[i] := temp_data[i];
    leaf.keys[i] := temp_keys[i];
    leaf.num_keys := leaf.num_keys + 1;
    i := i + 1;
  }

  i := split;
  j := 0;
  while(i < order)
    invariant ??? ;
  {
    new_leaf.data[j] := temp_data[i];
    new_leaf.keys[j] := temp_keys[i];
    new_leaf.num_keys := new_leaf.num_keys + 1;
    i := i + 1;
    j := j + 1;
  }

  free(temp_data);
  free(temp_keys);

  new_leaf.pointers[order - 1] := leaf.pointers[order - 1];
  leaf.pointers[order - 1] := new_leaf;

  i := leaf.num_keys;
  while(i < order - 1)
    invariant ???
  {
    leaf.pointers[i] := null;
    i := i + 1;
  }

  i := new_leaf.num_keys;
  while (i < order - 1)
    invariant ???
  {
    new_leaf.pointers[i] := null;
    i := i + 1;
  }

  new_leaf.parent := leaf.parent;
  new_key := new_leaf.keys[0];

  return insert_into_parent(root, leaf, new_key, new_leaf);
}


/* Inserts a new key and pointer to a node
 * into a node into which these can fit
 * without violating the B+ tree properties.
 */
procedure insert_into_node(root: Node, n: Node, left_index: Int, key: Int, right: Node)
  returns (res: Node)
  requires  ???
  ensures   ???
{
  var i: Int;

  i := n.num_keys;
  while (i > left_index)
    invariant ???
  {
    n.pointers[i + 1] := n.pointers[i];
    n.keys[i] := n.keys[i - 1];
    i := i - 1;
  }
  n.pointers[left_index + 1] := right;
  n.keys[left_index] := key;
  n.num_keys := n.num_keys + 1;
  return root;
}


/* Inserts a new key and pointer to a node
 * into a node, causing the node's size to exceed
 * the order, and causing the node to split into two.
 */
procedure insert_into_node_after_splitting( root: Node,
                                            old_node: Node,
                                            left_index: Int,
                                            key: Int,
                                            right: Node)
  returns (res: Node)
  requires  ???
  ensures   ???
{

  var i: Int;
  var j: Int;
  var split: Int;
  var k_prime: Int;
  var new_node: Node;
  var child: Node;
  var temp_keys: Array<Int>;
  var temp_pointers: Array<Node>;

  /* First create a temporary set of keys and pointers
   * to hold everything in order, including
   * the new key and pointer, inserted in their correct places.
   * Then create a new node and copy half of the
   * keys and pointers to the old node and
   * the other half to the new.
   */

  temp_pointers := new Array<Node>(order+1);
  temp_keys := new Array<Int>(order);

  i := 0;
  j := 0;
  while(i < old_node.num_keys + 1)
    invariant ???
  {
    if (j == left_index + 1)
      j := j + 1;
    temp_pointers[j] := old_node.pointers[i];
    i := i + 1;
    j := j + 1;
  }

  i := 0;
  j := 0;
  while (i < old_node.num_keys)
    invariant ???
  {
    if (j == left_index)
      j := j + 1;
    temp_keys[j] := old_node.keys[i];
    i := i + 1;
    j := j + 1;
  }

  temp_pointers[left_index + 1] := right;
  temp_keys[left_index] := key;

  /* Create the new node and copy
   * half the keys and pointers to the
   * old and half to the new.
   */
  split := cut(order);
  new_node := make_node();
  old_node.num_keys := 0;
  i := 0;
  while (i < split - 1)
    invariant ???
  {
    old_node.pointers[i] := temp_pointers[i];
    old_node.keys[i] := temp_keys[i];
    old_node.num_keys := old_node.num_keys + 1;
    i := i + 1;
  }
  old_node.pointers[i] := temp_pointers[i];
  k_prime := temp_keys[split - 1];
  i := i + 1;
  j := 0;
  while (i < order)
    invariant ???
  {
    new_node.pointers[j] := temp_pointers[i];
    new_node.keys[j] := temp_keys[i];
    new_node.num_keys := new_node.num_keys + 1;
    i := i + 1;
    j := j + 1;
  }
  new_node.pointers[j] := temp_pointers[i];
  free(temp_pointers);
  free(temp_keys);
  new_node.parent := old_node.parent;
  i := 0;
  while (i <= new_node.num_keys)
    invariant ???
  {
    child := new_node.pointers[i];
    child.parent := new_node;
    i := i + 1;
  }

  /* Insert a new key into the parent of the two
   * nodes resulting from the split, with
   * the old node to the left and the new to the right.
   */

  return insert_into_parent(root, old_node, k_prime, new_node);
}



/* Inserts a new node (leaf or internal node) into the B+ tree.
 * Returns the root of the tree after insertion.
 */
procedure insert_into_parent(root: Node, left: Node, key: Int, right: Node)
  returns (res: Node)
  requires  ???
  ensures   ???
{

  var left_index: Int;
  var parent: Node;

  parent := left.parent;

  /* Case: new root. */

  if (parent == null)
    return insert_into_new_root(left, key, right);

  /* Case: leaf or node. (Remainder of
   * function body.)
   */

  /* Find the parent's pointer to the left
   * node.
   */

  left_index := get_left_index(parent, left);


  /* Simple case: the new key fits into the node.
   */

  if (parent.num_keys < order - 1)
    return insert_into_node(root, parent, left_index, key, right);

  /* Harder case:  split a node in order
   * to preserve the B+ tree properties.
   */

  return insert_into_node_after_splitting(root, parent, left_index, key, right);
}


/* Creates a new root for two subtrees
 * and inserts the appropriate key into
 * the new root.
 */
procedure insert_into_new_root(left: Node, key: Int, right: Node)
  returns (res: Node)
  requires ???
  ensures  ???
{
  var root: Node := make_node();
  root.keys[0] := key;
  root.pointers[0] := left;
  root.pointers[1] := right;
  root.num_keys := root.num_keys + 1;
  root.parent := null;
  left.parent := root;
  right.parent := root;
  return root;
}



/* First insertion: start a new tree. */
procedure start_new_tree(order: Int, key: Int, value: Int)
  returns (res: BTree)
  requires  emp
  ensures   btree(res) //TODO key → value
{
  var root: Node := make_leaf();
  root.keys[0] := key;
  root.data[0] := value;
  root.pointers[order - 1] := null;
  root.parent := null;
  root.num_keys := root.num_keys + 1;
  var t := new BTree;
  t.root := root;
  t.order := order;
  return t;
}



/* Master insertion function.
 * Inserts a key and an associated value into
 * the B+ tree, causing the tree to be adjusted
 * however necessary to maintain the B+ tree
 * properties.
 */
procedure insert(root: Node, key: Int, value: Int) returns (res: Node)
  requires  ???
  ensures   ???
{

  var leaf: Node;

  /* The current implementation ignores duplicates. */

  if (find(root, key, false) != null)
    return root;

  /* Case: the tree does not exist yet.
   * Start a new tree. */

  if (root == null)
    return start_new_tree(5, key, value); //TODO the order ?


  /* Case: the tree already exists.
   * (Rest of function body.) */

  leaf := find_leaf(root, key);

  /* Case: leaf has room for key and pointer. */

  if (leaf.num_keys < order - 1) {
    leaf := insert_into_leaf(leaf, key, value);
    return root;
  }


  /* Case:  leaf must be split. */

  return insert_into_leaf_after_splitting(root, leaf, key, value);
}




// DELETION.

/* Utility function for deletion.  Retrieves
 * the index of a node's nearest neighbor (sibling)
 * to the left if one exists.  If not (the node
 * is the leftmost child), returns -1 to signify
 * this special case.
 */
procedure get_neighbor_index(n: Node ) returns (res: Int)
  requires  ???
  ensures   ???
{

  var i: Int;

  /* Return the index of the key to the left
   * of the pointer in the parent pointing to n.
   * If n is the leftmost child, this means return -1.
   */
  i := 0;
  while(i <= n.parent.num_keys)
    invariant ??? ;
  {
    if (n.parent.pointers[i] == n)
      return i - 1;
    i := i + 1;
  }

  assert(false);
}


procedure remove_entry_from_node(n: Node, key: Int, pointers: Node) returns (res: Node)
  requires  ???
  ensures   ???
{

  var i: Int;
  var num_pointers: Int;

  // Remove the key and shift other keys accordingly.
  i := 0;
  while (n.keys[i] != key)
    invariant ???
  {
    i := i + 1;
  }

  i := i + 1;
  while (i < n.num_keys)
    invariant ???
  {
    n.keys[i - 1] := n.keys[i];
    i := i + 1;
  }

  // Remove the pointer and shift other pointers accordingly.
  // First determine number of pointers.
  num_pointers := n.num_keys + 1;
  i := 0;
  while (n.pointers[i] != pointer)
    invariant ???
  {
    i := i + 1;
  }

  i := i + 1;
  while (i < num_pointers)
    invariant ???
  {
    n.pointers[i - 1] := n.pointers[i];
    i := i + 1;
  }


  // One key fewer.
  n.num_keys := n.num_keys - 1;

  // Set the other pointers to null for tidiness.
  // A leaf uses the last pointer to point to the next leaf.
  i := n.num_keys + 1;
  while (i < order)
  {
    n.pointers[i] := null;
    i := i + 1;
  }

  return n;
}

procedure remove_entry_from_leaf(n: Node, key: Int, value: Int) returns (res: Node)
  requires  ???
  ensures   ???
{

  var i: Int;
  var num_pointers: Int;

  // Remove the key and shift other keys accordingly.
  i := 0;
  while (n.keys[i] != key)
    invariant ???
  {
    i := i + 1;
  }

  i := i + 1;
  while (i < n.num_keys)
    invariant ???
  {
    n.keys[i - 1] := n.keys[i];
    i := i + 1;
  }

  // Remove the pointer and shift other pointers accordingly.
  // First determine number of pointers.
  num_pointers := n.num_keys;
  i := 0;
  while (n.data[i] != value)
    invariant ???
  {
    i := i + 1;
  }

  i := i + 1;
  while (i < num_pointers)
    invariant ???
  {
    n.data[i - 1] := n.data[i];
    i := i + 1;
  }


  // One key fewer.
  n.num_keys := n.num_keys - 1;

  // Set the other pointers to null for tidiness.
  // A leaf uses the last pointer to point to the next leaf.
  i := n.num_keys;
  while (i < order - 1)
  {
    n.data[i] := -1;
    i := i + 1;
  }

  return n;
}


procedure adjust_root(root: Node) returns (res: Node)
  requires  ??? ;
  ensures   ??? ;
{

  var new_root: Node;

  /* Case: nonempty root.
   * Key and pointer have already been deleted,
   * so nothing to be done.
   */

  if (root.num_keys > 0)
   return root;

  /* Case: empty root.
   */

  // If it has a child, promote
  // the first (only) child
  // as the new root.

  if (!root.is_leaf) {
    new_root := root.pointers[0];
    new_root.parent := null;
  }

  // If it is a leaf (has no children),
  // then the whole tree is empty.

  else
   new_root := null;

  free(root.keys);
  free(root.pointers);
  free(root);

  return new_root;
}


/* Coalesces a node that has become
 * too small after deletion
 * with a neighboring node that
 * can accept the additional entries
 * without exceeding the maximum.
 */
procedure coalesce_nodes(root: Node, n: Node, neighbor: Node, neighbor_index: Int, k_prime: Int) returns (res: Node)
  requires  ??? ;
  ensures   ??? ;
{

  var i: Int;
  var j: Int;
  var neighbor_insertion_index: Int;
  var n_end: Int;

  var tmp: Node;

  /* Swap neighbor with node if node is on the
   * extreme left and neighbor is to its right.
   */

  if (neighbor_index == -1) {
    tmp := n;
    n := neighbor;
    neighbor := tmp;
  }

  /* Starting point in the neighbor for copying
   * keys and pointers from n.
   * Recall that n and neighbor have swapped places
   * in the special case of n being a leftmost child.
   */

  neighbor_insertion_index := neighbor.num_keys;

  /* Case:  nonleaf node.
   * Append k_prime and the following pointer.
   * Append all pointers and keys from the neighbor.
   */

  if (!n.is_leaf) {

    /* Append k_prime.
     */

    neighbor.keys[neighbor_insertion_index] := k_prime;
    neighbor.num_keys := neighbor.num_keys + 1;


    n_end := n.num_keys;


    i := neighbor_insertion_index + 1;
    j := 0;
    while (j < n_end)
      invariant ??? ;
    {
      neighbor.keys[i] := n.keys[j];
      neighbor.pointers[i] := n.pointers[j];
      neighbor.num_keys := neighbor.num_keys + 1;
      n.num_keys := n.num_keys - 1;
      i := i + 1;
      j := j + 1;
    }

    /* The number of pointers is always
     * one more than the number of keys.
     */

    neighbor.pointers[i] := n.pointers[j];

    /* All children must now point up to the same parent.
     */

    i := 0;
    while (i < neighbor.num_keys + 1)
      invariant ??? ;
    {
      tmp := neighbor.pointers[i];
      tmp.parent := neighbor;
      i := i + 1;
    }
  }

  /* In a leaf, append the keys and pointers of
   * n to the neighbor.
   * Set the neighbor's last pointer to point to
   * what had been n's right neighbor.
   */

  else {
    i := neighbor_insertion_index;
    j := 0;
    while (j < n.num_keys)
      invariant ??? ;
    {
      neighbor.keys[i] := n.keys[j];
      neighbor.pointers[i] := n.pointers[j];
      neighbor.num_keys := neighbor.num_keys + 1;
      i := i + 1;
      j := j + 1;
    }
    neighbor.pointers[order - 1] := n.pointers[order - 1];
  }

  root := delete_node_entry(root, n.parent, k_prime, n);
  free(n.keys);
  free(n.pointers);
  free(n.data);
  free(n);
  return root;
}


/* Redistributes entries between two nodes when
 * one has become too small after deletion
 * but its neighbor is too big to append the
 * small node's entries without exceeding the
 * maximum
 */
procedure redistribute_nodes(root: Node,
                             n: Node,
                             neighbor: Node,
                             neighbor_index: Int,
                             k_prime_index: Int,
                             k_prime: Int) returns (res: Node)
  requires  ??? ;
  ensures   ??? ;
{

  //TODO pointers vs data

  var i: Int;
  var tmp: Node;

  /* Case: n has a neighbor to the left.
   * Pull the neighbor's last key-pointer pair over
   * from the neighbor's right end to n's left end.
   */

  if (neighbor_index != -1) {
    if (!n.is_leaf)
      n.pointers[n.num_keys + 1] := n.pointers[n.num_keys];

    i := n.num_keys;
    while(i > 0)
      invariant ??? ;
    {
      n.keys[i] := n.keys[i - 1];
      n.pointers[i] := n.pointers[i - 1];
      i := i - 1;
    }
    if (!n.is_leaf) {
      n.pointers[0] := neighbor.pointers[neighbor.num_keys];
      tmp := n.pointers[0];
      tmp.parent := n;
      neighbor.pointers[neighbor.num_keys] := null;
      n.keys[0] := k_prime;
      n.parent.keys[k_prime_index] := neighbor.keys[neighbor.num_keys - 1];
    }
    else {
      n.pointers[0] := neighbor.pointers[neighbor.num_keys - 1];
      neighbor.pointers[neighbor.num_keys - 1] := null;
      n.keys[0] := neighbor.keys[neighbor.num_keys - 1];
      n.parent.keys[k_prime_index] := n.keys[0];
    }
  }

  /* Case: n is the leftmost child.
   * Take a key-pointer pair from the neighbor to the right.
   * Move the neighbor's leftmost key-pointer pair
   * to n's rightmost position.
   */

  else {
    if (n.is_leaf) {
      n.keys[n.num_keys] := neighbor.keys[0];
      n.pointers[n.num_keys] := neighbor.pointers[0];
      n.parent.keys[k_prime_index] := neighbor.keys[1];
    }
    else {
      n.keys[n.num_keys] := k_prime;
      n.pointers[n.num_keys + 1] := neighbor.pointers[0];
      tmp := n.pointers[n.num_keys + 1];
      tmp.parent := n;
      n.parent.keys[k_prime_index] := neighbor.keys[0];
    }
    i := 0;
    while(i < neighbor.num_keys - 1)
      invariant ??? ;
    {
      neighbor.keys[i] := neighbor.keys[i + 1];
      neighbor.pointers[i] := neighbor.pointers[i + 1];
      i := i + 1
    }
    if (!n.is_leaf)
      neighbor.pointers[i] := neighbor.pointers[i + 1];
  }

  /* n now has one more key and one more pointer;
   * the neighbor has one fewer of each.
   */

  n.num_keys := n.num_keys + 1;
  neighbor.num_keys := neighbor.num_keys - 1;

  return root;
}


/* Deletes an entry from the B+ tree.
 * Removes the record and its key and pointer
 * from the leaf, and then makes all appropriate
 * changes to preserve the B+ tree properties.
 */
procedure delete_node_entry( root: Node, n: Node, key: Int, pointer: Node)
  requires  ???
  ensures   ???
{

  var min_keys: Int;
  var neighbor: Node;
  var neighbor_index: Int;
  var k_prime_index: Int;
  var k_prime: Int;
  var capacity: Int;

  // Remove key and pointer from node.

  n := remove_entry_from_node(n, key, pointer);

  /* Case:  deletion from the root.
   */

  if (n == root)
    return adjust_root(root);


  /* Case:  deletion from a node below the root.
   * (Rest of function body.)
   */

  /* Determine minimum allowable size of node,
   * to be preserved after deletion.
   */

  if (n.is_leaf) {
    min_keys := cut(order - 1);
  } else {
    min_keys := cut(order) - 1;
  }

  /* Case:  node stays at or above minimum.
   * (The simple case.)
   */

  if (n.num_keys >= min_keys)
    return root;

  /* Case:  node falls below minimum.
   * Either coalescence or redistribution
   * is needed.
   */

  /* Find the appropriate neighbor node with which
   * to coalesce.
   * Also find the key (k_prime) in the parent
   * between the pointer to node n and the pointer
   * to the neighbor.
   */

  neighbor_index := get_neighbor_index( n );
  if (neighbor_index == -1){
    k_prime_index := 0;
  } else {
    k_prime_index := neighbor_index;
  }
  k_prime := n.parent.keys[k_prime_index];
  if (neighbor_index == -1) {
    neighbor := n.parent.pointers[1]
  } else {
    neighbor := n.parent.pointers[neighbor_index];
  }

  if (n.is_leaf) {
    capacity := order;
  } else {
    capacity := order - 1;
  }

  /* Coalescence. */

  if (neighbor.num_keys + n.num_keys < capacity)
    return coalesce_nodes(root, n, neighbor, neighbor_index, k_prime);

  /* Redistribution. */

  else
    return redistribute_nodes(root, n, neighbor, neighbor_index, k_prime_index, k_prime);
}

/* Deletes an entry from the B+ tree.
 * Removes the record and its key and pointer
 * from the leaf, and then makes all appropriate
 * changes to preserve the B+ tree properties.
 */
procedure delete_leaf_entry( root: Node, n: Node, key: Int, value: Int)
  requires  ???
  ensures   ???
{

  var min_keys: Int;
  var neighbor: Node;
  var neighbor_index: Int;
  var k_prime_index: Int;
  var k_prime: Int;
  var capacity: Int;

  // Remove key and pointer from node.

  n := remove_entry_from_leaf(n, key, value);

  /* Case:  deletion from the root.
   */

  if (n == root)
    return adjust_root(root);


  /* Case:  deletion from a node below the root.
   * (Rest of function body.)
   */

  /* Determine minimum allowable size of node,
   * to be preserved after deletion.
   */

  if (n.is_leaf) {
    min_keys := cut(order - 1);
  } else {
    min_keys := cut(order) - 1;
  }

  /* Case:  node stays at or above minimum.
   * (The simple case.)
   */

  if (n.num_keys >= min_keys)
    return root;

  /* Case:  node falls below minimum.
   * Either coalescence or redistribution
   * is needed.
   */

  /* Find the appropriate neighbor node with which
   * to coalesce.
   * Also find the key (k_prime) in the parent
   * between the pointer to node n and the pointer
   * to the neighbor.
   */

  neighbor_index := get_neighbor_index( n );
  if (neighbor_index == -1){
    k_prime_index := 0;
  } else {
    k_prime_index := neighbor_index;
  }
  k_prime := n.parent.keys[k_prime_index];
  if (neighbor_index == -1) {
    neighbor := n.parent.pointers[1]
  } else {
    neighbor := n.parent.pointers[neighbor_index];
  }

  if (n.is_leaf) {
    capacity := order;
  } else {
    capacity := order - 1;
  }

  /* Coalescence. */

  if (neighbor.num_keys + n.num_keys < capacity)
    return coalesce_nodes(root, n, neighbor, neighbor_index, k_prime);

  /* Redistribution. */

  else
    return redistribute_nodes(root, n, neighbor, neighbor_index, k_prime_index, k_prime);
}



/* Master deletion function.
 */
procedure delete(t: BTree, key: Int) returns (node: BTree)
  requires  btree(t)
  ensures   btree(res)
{

  var key_leaf: Node;
  var key_record: Int;

  key_record := find(t, key, false);
  key_leaf := find_leaf(t, key);
  if (key_record != -1 && key_leaf != null) {
    root := delete_leaf_entry(root, key_leaf, key, key_record); //TODO root vs t
  }
  return t;
}


procedure destroy_tree_nodes(root: Node, ghost order: Int)
  requires  sub_btree(order, root)
  ensures   emp
{
  var i: Int;
  if (!root.is_leaf) {
    i := 0;
    while (i < root.num_keys)
      invariant i >= 0
      invariant acc(root) &*& ...
      invariant node_arraysegWithSubtree(root.pointers, i, root.num_keys)
      //invariant star j: Int:: j >= i && j < root.num_keys ==> sub_btree(root.pointers[j])
    {
      destroy_tree_nodes(root.pointers[i]);
      i := i + i;
    }
  }
  root.parent := null; //DZ: due to the way we specify the footprint
  free(root.keys);
  free(root.data);
  free(root.pointers);
  free(root);
}


procedure destroy_tree(t: BTree)
  requires  btree(t)
  ensures   emp
{
  destroy_tree_nodes(t.root);
  free(t);
}


// MAIN
// > root = delete(root, input);
// > root = insert(root, input, input);
