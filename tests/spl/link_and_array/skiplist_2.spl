//  inspired by
//  http://opendatastructures.org/versions/edition-0.1e/ods-java/4_3_SkiplistList_Efficient_.html
//  under CC-BY
//  full source at http://opendatastructures.org/ods-java.tgz

include "../include/skiplistWithLength.spl";

procedure findPred(this: SkipList, index: Int)
  returns (res: Node)
  requires  skiplist(this)
  ensures   acc(res) -** skiplist(this)
{
  var r: Int  := this.curr_height;
  var u: Node := this.sentinel;
  var j: Int  := -1; // the index of the current node in list 0
  while (r >= 0)
    invariant r <= u.height
    invariant acc(u) -** skiplist(this)
  {
    while (u.next[r] != null && j + u.length[r] < index)
      invariant acc(u) -** skiplist(this)
    {
      j := j + u.length[r];
      u := u.next[r];
    }
    r := r-1;
  }
  return u;
}

procedure get(sentinel: Node, index: Int) returns (res: Int)
  requires index >= 0 && index <= n; //TODO the n jumps out of nowhere
  requires  ???
  ensures   ???
{
  return findPred(sentinel, index).next[0].data;
}

procedure set(this: SkipList, index: Int, x: Int) returns (res: Int)
  requires index >= 0 && index < n;
  requires  skiplist(this)
  ensures   skiplist(this)
{
  var u: Node := findPred(this, index).next[0];
  var y: Int := u.data;
  u.data := x;
  return y;
}

procedure add(this: Skiplist, Int index: Int, x: Int)
  requires index >= 0 && index <= n; //TODO the n jumps out of nowhere
  requires  ??? ;
  ensures   ??? ;
{
  val height: Int;
  assume(height >= 0 && height < this.max_height);
  var w: Node := new Node;
  w.next := new Node[height];
  w.length := new Int[height];
  w.data := x;
  w.height := height;
  if (height > this.curr_height) {
    this.curr_height := height;
  }
  addAux(this, index, w);
}

procedure addAux(sentinel: Node, index: Int, w: Node) returns (res: Node)
  requires  ??? ;
  ensures   ??? ;
{
  var u: Node := sentinel;
  Int k := w.height;
  var r: Int := h;
  var j: Int := -1; // index of node u
  while (r >= 0)
    invariant ??? ;
  {
    while (u.next[r] != null && j+u.length[r] < index)
      invariant ??? ;
    {
      j := j + u.length[r];
      u := u.next[r];
    }
    u.length[r] := u.length[r] + 1;    // to account for new node in list 0
    if (r <= k) {
      w.next[r] := u.next[r];
      u.next[r] := w;
      w.length[r] := u.length[r] - (index - j);
      u.length[r] := index - j;
    }
    r := r - 1;
  }
  n := n + 1;
  return u;
}

procedure remove(this: Skiplist, index: Int) return (res: Int)
  requires index >= 0 && index <= n; //TODO the n jumps out of nowhere
  requires  ??? ;
  ensures   ??? ;
{
  var x: Int := null;
  var u: Node := this.sentinel;
  var r: Int := u.height;
  var j: Int := -1; // index of node u
  while (r >= 0)
    invariant ??? ;
  {
    while (u.next[r] != null && j+u.length[r] < index)
      invariant ??? ;
    {
      j := j + u.length[r];
      u := u.next[r];
    }
    u.length[r] := u.length[r] - 1;  // for the node we are removing
    if (j + u.length[r] + 1 == index && u.next[r] != null) {
      x := u.next[r].x;
      u.length[r] := u.length[r] + u.next[r].length[r];
      u.next[r] := u.next[r].next[r];
      if (u == sentinel && u.next[r] == null)
        h := h - 1;
    }
    r := r - 1;
  }
  n := n - 1;
  return x;
}

