/*
Hashset with content, based on the ownership idea. 

Each bucket is "owned" by an object of type List, and this object must be in the footprint if the list it owns is modified in any way.
*/


/* ********** Begin stuff copied from node_array, modified for list ********** */


function arrayseg_footprint(a: Array<List>, i: Int, j: Int)
  returns (FP: Set<ArrayCell<List>>)
  ensures forall c: ArrayCell<List> ::
            c in FP == (i <= c.index && c.index < j && c.array == a)

function array_state() returns (m: Map<ArrayCell<List>, List>)
  ensures forall c: ArrayCell<List> :: c.m == c[] @(matching c yields c.m)

/* ********** Struct definitions ********** */

struct Data {}

struct Node {
  var next: Node;
  var data: Data;
}

struct List {
  var head: Node;
}

struct HashSet {
  var size: Int; /* the size of the set */
  var buckets: Array<List>; /* the set elements */
}

/* ********** Extra frame axioms, based on ownership ********** */
  
axiom (forall a1: Set<List>, fp1: Set<List>, a2: Set<Node>, fp2: Set<Node>, next1: Map<Node, Node>, next2: Map<Node, Node>, head1: Map<List, Node>, head2: Map<List, Node>, l: List ::
       Frame(fp2, a2, next1, next2) && Frame(fp1, a1, head1, head2) &&
       l !in fp1 && l in a1 ==>
       listset_footprint(l, head1, next1) == listset_footprint(l, head2, next2)
       @(pattern Frame(fp2, a2, next1, next2))
       @(pattern Frame(fp1, a1, head1, head2))
       @(matching Frame(fp2, a2, next1, next2), Frame(fp1, a1, head1, head2), listset_footprint(l, head1, next1) yields listset_footprint(l, head2, next2))
       @(matching Frame(fp2, a2, next1, next2), Frame(fp1, a1, head1, head2), listset_footprint(l, head2, next2) yields listset_footprint(l, head1, next1)));

axiom (forall a1: Set<List>, fp1: Set<List>, a2: Set<Node>, fp2: Set<Node>, s: Set<Node>, next1: Map<Node, Node>, next2: Map<Node, Node>, head1: Map<List, Node>, head2: Map<List, Node>, data1: Map<Node, Data>, data2: Map<Node, Data>, l: List ::
       Frame(fp2, a2, next1, next2) && Frame(fp1, a1, head1, head2) && Frame(fp2, a2, data1, data2) &&
       l !in fp1 && l in a1 ==>
       listset_content(l, head1, next1, data1, s) == listset_content(l, head2, next2, data2, s)
       @(pattern Frame(fp1, a1, head1, head2))
       @(pattern Frame(fp2, a2, next1, next2))
       @(pattern Frame(fp2, a2, data1, data2))
       @(matching Frame(fp2, a2, next1, next2), Frame(fp1, a1, head1, head2), Frame(fp2, a2, data1, data2), listset_content(l, head1, next1, data1, s) yields listset_content(l, head2, next2, data2, s))
       @(matching Frame(fp2, a2, next1, next2), Frame(fp1, a1, head1, head2), Frame(fp2, a2, data1, data2), listset_content(l, head2, next2, data2, s) yields listset_content(l, head1, next1, data1, s)));

/* ********** Functions and predicates ********** */

function listset_footprint(l: List, head: Map<List, Node>, next: Map<Node, Node>) returns (FP: Set<Node>)

function list_witness(l: List, as: Map<ArrayCell<List>, List>, fp: Set<ArrayCell<List>>) returns (c: ArrayCell<List>)

function node_witness(n: Node, head: Map<List, Node>, fp: Set<List>) returns (c: List) // TODO Does this depend on next too? Does this need a frame axiom too?

function listset_content(l: List, head: Map<List, Node>, next: Map<Node, Node>, data: Map<Node, Data>, FP: Set<Node>) returns (C: Set<Data>)

function cnt_witness(d: Data, data: Map<Node, Data>, head: Map<List, Node>, next: Map<Node, Node>)(FP: Set<List>) returns (n: List)
  
predicate listset(l: List, head: Map<List, Node>, next: Map<Node, Node>, C: Set<Data>) {
  exists FPN: Set<Node> ::
    acc(FPN) &*&
    FPN == listset_footprint(l, head, next) &&
    C == listset_content(l, head, next, data, FPN) 
}

function arrayseg_list_footprint(a: Array<List>, FP0: Set<ArrayCell<List>>)
  returns (FP1: Set<List>)
  requires acc(FP0)
  ensures forall c in FP0 :: c[] in FP1 @(matching c yields c[])
  ensures forall l in FP1 :: list_witness(l, array_state(), FP0) in FP0
  ensures forall l in FP1 :: l == list_witness(l, array_state(), FP0)[]
    @(matching l yields list_witness(l, array_state(), FP0))
  /* Each ArrayCell should have a distinct List object */
  ensures forall c1 in FP0, c2 in FP0 :: c1 == c2 || c1[] != c2[]

function arrayseg_node_footprint(FP0: Set<List>) returns (FP1: Set<Node>)
  requires acc(FP0)
  ensures forall l in FP0, n : Node :: n in lseg_footprint(l, head, next) ==> n in FP1
            @(matching l yields lseg_footprint(l, head, next))
  ensures forall n in FP1 :: node_witness(n, head, next, FP0) in FP0
  ensures forall n in FP1 :: n in lseg_footprint(node_witness(n, head, next, FP0), head, next)
            @(matching n yields node_witness(n, head, next, FP0))

function arrayseg_buckets_content(FP0: Set<List>) returns (C: Set<Data>)
  requires acc(FP0)
  ensures forall l in FP0, d: Data :: d in listset_content(l, head, next, data, listset_footprint(l, head, next)) ==> d in C
           @(matching l yields listset_content(l, head, next, data, listset_footprint(l, head, next)))
  ensures forall d in C :: cnt_witness(d, data, head, next, FP0) in FP0
  ensures forall d in C :: d in listset_content(cnt_witness(d, data, head, next, FP0), head, next, data, listset_footprint(cnt_witness(d, data, head, next, FP0), head, next))
         @(matching d yields cnt_witness(d, data, head, next, FP0))

predicate arrayseg_with_buckets(a: Array<List>, lo: Int, hi: Int, C: Set<Data>)
{
  exists FP0: Set<ArrayCell<List>>, FP1: Set<List>, FP2: Set<Node> ::
    acc(FP0) &*& acc(FP1) &*& acc(FP2) &*&
    0 <= lo && lo <= hi && hi <= a.length &&
    FP0 == arrayseg_footprint(a, lo, hi) &&
    FP1 == arrayseg_list_footprint(a, FP0) &&
    FP2 == arrayseg_node_footprint(FP1) &&
    C == arrayseg_buckets_content(FP1) &&
 
    /* every array cells points to a listset */
    (forall c in FP0 :: listset(c[], head, next, listset_content(c[], head, next, data, listset_footprint(c[], head, next)), listset_footprint(c[], head, next))) &&
 
    /* The footprints of the listsets are disjoint */
    (forall c1 in FP0, c2 in FP0, n : Node :: c1 == c2 || (n !in listset_footprint(c1[], head, next) || n !in listset_footprint(c2[], head, next))) &&
 
    /* all data values of a bucket list have the same hash,
    which is the index of the array cell that points to the list.
    (implies the disjointness of the content sets of the lists) */
    (forall c in FP0, d in listset_content(c[], head, next, data, listset_footprint(c[], head, next)) :: hash(a.length, d) = c.index) &&
    /* TODO Or this version??
    (forall n in FP2 :: hash(a.length, n.data) = list_witness(node_witness(n, head, FP1), array_state(), FP0).index) && */
    true
}

predicate array_with_buckets(a: Array<List>, C: Set<Data>)
{
  acc(a) &*&
  arrayseg_with_buckets(a, 0, a.length, C)
}

// some ghost function that we can use for the spec of hash
function hash(max: Int, value: Data)
  returns (res: Int)
  requires max > 0
  ensures res >= 0 && res < max

predicate hset(h: HashSet, C: Set<Data>)
{
  h.size == h.buckets.length &*&
  acc(h) &*&
  array_with_buckets(h.buckets, C)
}

/* ********** The actual procedures ********** */

procedure listset_add(lst: List, val: Data, implicit ghost C: Set<Data>)
  requires acc(lst) &*& listset(lst, head, next, C)
  ensures acc(lst) &*& listset(lst, head, next, C ++ Set(val))

procedure hashset_add(hashset: HashSet, value: Data, implicit ghost C: Set<Data>)
  requires hset(hashset, C)
  ensures hset(hashset, C ++ Set(value))
{
  var hashval := hash(hashset.size, value);
  /* assert hset(hashset, C); */
  var list := hashset.buckets[hashval];
  /* assert listset(list, head, next) -** hset(hashset, C); */
  listset_add(list, value);
}

procedure listset_contains(lst: List, val: Data, implicit ghost C: Set<Data>)
  returns (res: Bool)
  requires acc(lst) &*& listset(lst, head, next, C)
  ensures acc(lst) &*& listset(lst, head, next, C) &*& res == val in C

procedure hashset_contains(hashset: HashSet, value: Data, implicit ghost C: Set<Data>)
  returns (res: Bool)
  requires hset(hashset, C)
  ensures hset(hashset, C) &*& res == value in C
{
  var hashval := hash(hashset.size, value);
  var list := hashset.buckets[hashval];
  /* pure assert listset_content(list, head, next, data, listset_footprint(list, head, next)) subsetof C; */
  res := listset_contains(list, value);
  return res;
}

procedure listset_remove(lst: List, val: Data, implicit ghost C: Set<Data>)
  requires acc(lst) &*& listset(lst, head, next, C)
  ensures acc(lst) &*& listset(lst, head, next, C -- Set(val))

procedure hashset_remove(hashset: HashSet, value: Data, implicit ghost C: Set<Data>)
  requires hset(hashset, C)
  ensures hset(hashset, C -- Set(value))
{
  var hashval := hash(hashset.size, value);
  var list := hashset.buckets[hashval];
  listset_remove(list, value);
}
