include "../include/node_array.spl";
include "../include/slslist.spl";
include "../list_set/delete.spl";
include "../list_set/insert.spl";
include "../list_set/contains.spl";

struct HashSet {
  var size: Int; /* the size of the set */
  var buckets: Array<Node>; /* the set elements */
}

//TODO we are missing:  ghostHash(..., dataWitness(...).data)

function arrayseg_buckets_footprint(a: Array<Node>, FP0: Set<ArrayCell<Node>>)
  returns (FP1: Set<Node>)
  requires acc(FP0)
  // all nodes reachable from the head of the bucket are in the footprint
  ensures (forall c: ArrayCell<Node>, x: Node :: c in FP0 &&
           Reach(next, c.array[c.index], x) ==> x in FP1 || x == null
           @(matching c yields c.array[c.index]))
  // all nodes in the footprint are reachable from the bucket head
  ensures (forall x in FP1 :: Reach(next, a[hash(a.length, x.data)], x) && x != null
            @(matching x yields a[hash(a.length, x.data)]))
  // the bucket heads are in the array's footprint
  ensures (forall x in FP1 :: a.cells[hash(a.length, x.data)] in FP0
     @(matching x yields a.cells[hash(a.length, x.data)] ))

predicate arrayseg_with_buckets(a: Array<Node>, lo: Int, hi: Int, cnt: Set<Int>) {
  exists FP0: Set<ArrayCell<Node>>, FP1: Set<Node> ::
    acc(FP0) &*& acc(FP1) &*&
    0 <= lo && lo <= hi && hi <= a.length &&
    FP0 == { c: ArrayCell<Node> :: lo <= c.index && c.index < hi && c.array == a } &&
    FP1 == arrayseg_buckets_footprint(a, FP0) &&
    (forall c: ArrayCell<Node>, x in FP1 :: c in FP0 && Reach(next, c.array[c.index], x) ==> hash(a.length, x.data) == c.index) &&
    (forall c: ArrayCell<Node> :: c in FP0 ==> Reach(next, c.array[c.index], null) @(matching c yields c.array[c.index])) &&
    //all the elts from a list have the same hash, and this is the index in the array
    (forall v in FP1 :: Btwn(next, a[hash(a.length, v.data)], v, null) @(matching v yields a[hash(a.length, v.data)])) &&
    //the buckets are strictly sorted
    (forall y in FP1, z in FP1 :: Btwn(next,y,z,z) ==> y.data < z.data || y == z) &&
    cnt == content(FP1)
}

predicate array_with_buckets(a: Array<Node>, cnt: Set<Int>) {
  acc(a) &*& arrayseg_with_buckets(a, 0, a.length, cnt)
}

//some ghost function that we can use for the spec of hash
function hash(max: Int, value: Int) returns (res: Int)
  requires max > 0
  ensures res >= 0 && res < max

predicate hset(h: HashSet, cnt: Set<Int>) {
  h.size == h.buckets.length && h.size > 0 &*&
  acc(h) &*& array_with_buckets(h.buckets, cnt)
}

/*
procedure hash(hashset: HashSet, value: Int, implicit ghost content: Set<Int>)
  returns (res: Int)
  requires hset(hashset, content) &*& hashset.size > 0
  ensures  hset(hashset, content)
  ensures  res >= 0 && res < hashset.size && res == ghostHash(hashset.size, value)
{
  //one of the worst hash functions in the world
  var v := 31 * value;
  if (v < 0) v := -v;
  return v % hashset.size; 
  //pure assume(v == ghostHash(hashset.size, value));
}
*/

procedure create_hashset(s: Int) returns (res: HashSet)
  requires s > 0
  ensures hset(res, Set<Int>())
{
  var new_set := new HashSet;
  new_set.buckets := new Array<Node>(s);    

  var i := 0;
  while(i < s)
    invariant i >= 0 && i <= s && new_set.buckets.length == s
    invariant acc(new_set) &*& acc(new_set.buckets)
    invariant arrayseg_with_buckets(new_set.buckets, 0, i, {})
    invariant arrayseg(new_set.buckets, i, s)
  {
    new_set.buckets[i] := null;
    i := i + 1;
  }

  new_set.size := s;

  return new_set;
}

procedure member(hashset: HashSet, value: Int, implicit ghost content: Set<Int>)
  returns (res: Bool)
  requires hset(hashset, content)
  ensures  hset(hashset, content)
  ensures  res == (value in content)
{
  var hashval := hash(hashset.size, value);
  var list := hashset.buckets[hashval];
  return contains(list, value);
}



procedure add(hashset: HashSet, value: Int, implicit ghost content: Set<Int>)
  requires hset(hashset, content)
  ensures  hset(hashset, content ++ {value})
{
  var hashval := hash(hashset.size, value);
  var list := hashset.buckets[hashval];
  hashset.buckets[hashval] := insert(list, value);
}



procedure remove(hashset: HashSet, value: Int, implicit ghost content: Set<Int>)
  requires hset(hashset, content)
  ensures  hset(hashset, content -- {value})
{
  var hashval := hash(hashset.size, value);
  var list := hashset.buckets[hashval];
  hashset.buckets[hashval] := delete(list, value);
}



//  procedure free_set(hashset: HashSet, implicit ghost content: Set<Int>)
//    requires hset(hashset, content)
//    ensures emp
//  {
//    var i := 0;
//    while(i < hashset.size)
//      invariant i >= 0 && i <= hashset.size
//      invariant acc(hashset) &*& acc(hashset.buckets)
//      invariant arrayseg(hashset.buckets, 0, i) &*& arraysegWithNodes(hashset.buckets, i, hashset.size)
//    {
//      var list := hashset.buckets[i];
//      while(list != null)
//        invariant lseg(list, null)
//      {
//        var temp := list;
//        list := list.next;
//        free(temp);
//      }
//      i := i + 1;
//    }

//    free(hashset.buckets);
//    free(hashset);
//  }
