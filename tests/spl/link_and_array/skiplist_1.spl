//  inspired by
//  http://opendatastructures.org/versions/edition-0.1e/ods-java/4_2_SkiplistSSet_Efficient_.html
//  under CC-BY

var MAX: int;
assume(MAX > 0);

struct Node {
  x: int;
  next: Node[MAX];
}

//TODO global h;


procedure findPredNode(sentinel: Node, x: int) returns (res: Node)
  requires  ??? ;
  ensures   ??? ;
{
  var u: Node = sentinel;
  var r: int = h;
  while (r >= 0)
  {
    while (u.next[r] != null && compare(u.next[r].x,x) < 0)
    {
      u = u.next[r];   // go right in list r
    }
    r = r - 1;               // go down into list r-1
  }
  return u;
}

procedure find(sentinel: Node, x: int) returns (res: Node)
  requires  ??? ;
  ensures   ??? ;
{
  var u: Node = findPredNode(sentinel, x);
  return u.next[0] == null ? null : u.next[0].x;
}

procedure add(sentinel: Node, x: int) returns (res: bool)
  requires  ??? ;
  ensures   ??? ;
{
  var stack: Node[] = new Node[???]; //worst case is length of the list ?
  var u: Node = sentinel;
  var r: int = h;
  var comp: int = 0;

  while (r >= 0)
    invariant ??? ;
  {
    while (u.next[r] != null && (comp = compare(u.next[r].x,x)) < 0)
      invariant ??? ;
    {
      u = u.next[r];
    }
    if (u.next[r] != null && comp == 0)
      return false;
    stack[r] = u;
    r = r - 1;
  }

  val height: int;
  assume(height >= 0 && height < MAX);
  var w: Node = new Node;
  w.x = x;

  while (h < w.height())
    invariant ??? ;
  {
    h = h+1;
    stack[h] = sentinel;   // increasing height of skiplist
  }

  var i: int = 0;
  while(i < w.next.length)
    invariant ??? ;
  {
    w.next[i] = stack[i].next[i];
    stack[i].next[i] = w;
    i = i + 1;
  }
  n = n + 1;
  return true;
}

procedure remove(sentinel: Node, x: int) returns (res: bool)
  requires  ??? ;
  ensures   ??? ;
{
  boolean removed = false;
  var u: Node = sentinel;
  int r = h;
  int comp = 0;
  while (r >= 0)
    invariant ??? ;
  {
    while (u.next[r] != null && (comp = compare(u.next[r].x, x)) < 0)
      invariant ??? ;
    {
      u = u.next[r];
    }
    if (u.next[r] != null && comp == 0) {
      removed = true;
      u.next[r] = u.next[r].next[r];
      if (u == sentinel && u.next[r] == null)
        h = h - 1; // skiplist height has gone down
    }
    r = r - 1;
  }
  if (removed)
    n = n - 1;
  return removed;
}
