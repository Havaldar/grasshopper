//  inspired by
//  http://opendatastructures.org/versions/edition-0.1e/ods-java/4_2_SkiplistSSet_Efficient_.html
//  under CC-BY

include "../include/skiplist.spl";

procedure findPredNode(this: SkipList, x: Int) 
  returns (res: Node)
  requires skiplist(this)
  ensures acc(res) -** skiplist(this)
{
  var u: Node := this.head;
  var r: Int := this.height;

  while (r >= 0)
    invariant r <= this.height
    invariant acc(u) -** skiplist(this)
  {
    while (u.next[r] != null && u.next[r].data < x)
    {
      u := u.next[r];   // go right in list r
    }
    r := r - 1;         // go down Into list r-1
  }
  return u;
}

procedure find(this: SkipList, x: Int) 
  returns (res: Node)
  requires skiplist(this)
  ensures (res == null || acc(res)) -** skiplist(this)
{
  var u: Node := findPredNode(this, x);
  if (u.next[0] == null) {
    return null;
  } else {
    return u.next[0];
  }
}

procedure pickHeight(max_height: Int) 
  returns (height: Int)
  requires 0 <= max_height
  ensures 0 <= height && height <= max_height;

procedure add(this: SkipList, x: Int) 
  returns (res: Bool)
  requires skiplist(this)
  ensures skiplist(this)
{
  var stack: Node[] := new Node[this.max_height];
  var u: Node := this.head;
  var r: Int := this.height;

  while (r >= 0)
    invariant r <= this.height
    invariant acc(u) -** skiplist(this)
  {
    while (u.next[r] != null && u.next[r].data < x)
      invariant acc(u) -** skiplist(this)
    {
      u := u.next[r];
    }
    if (u.next[r] != null && u.next[r].data == x)
      return false;
    stack[r] := u;
    r := r - 1;
  }

  var height: Int;
  height := pickHeight(this.max_height);

  var w: Node := new Node;
  w.data := x;
  w.next := new Node[height + 1];

  while (this.height < height)
    invariant emp //how do we write the array permissions ?
  {
    this.height := this.height + 1;
    stack[this.height] := this.head;   // increasing height of skiplist
  }

  var i: Int := 0;
  while (i < w.next.length)
    invariant acc(w) -** skiplist(this)
  {
    w.next[i] := stack[i].next[i];
    stack[i].next[i] := w;
    i := i + 1;
  }
  return true;
}

procedure remove(this: SkipList, x: Int) 
  returns (removed: Bool)
  requires skiplist(this)
  ensures skiplist(this)
{
  removed := false;
  var u: Node := this.head;
  var r: Int := this.height;
  
  while (r >= 0)
    invariant acc(u) -** skiplist(this)
    invariant r <= this.height
  {
    while (u.next[r] != null && u.next[r].data < x)
      invariant acc(u) -** skiplist(this)
    {
      u := u.next[r];
    }
    if (u.next[r] != null && u.next[r].data == x) {
      removed := true;
      u.next[r] := u.next[r].next[r];
      if (u == this.head && u.next[r] == null) {
        this.height := this.height - 1; // skiplist height has gone down
      }
    }
    r := r - 1;
  }
  return removed;
}
