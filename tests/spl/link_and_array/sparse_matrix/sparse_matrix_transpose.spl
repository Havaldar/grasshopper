//from:
//  http://www.dailyfreecode.com/Code/transpose-sparse-matrix-2829.aspx

#define MAX1 3
#define MAX2 3
#define MAXSIZE 9
#define BIGNUM 100

struct sparse
{
    int *sp ;
    int row ;
} ;

//  void main( )
//  {
//      struct sparse s[3] ;
//      int c, i ;
//
//      for ( i = 0 ; i <= 2 ; i++ )
//          initsparse ( &s[i] ) ;
//
//      create_array ( &s[0] ) ;
//
//      create_tuple ( &s[1], s[0] ) 
//
//      transpose ( &s[2], s[1] ) ;
//
//      for ( i = 0 ; i <= 2 ; i++ )
//          delsparse ( &s[i] ) ;
//  }

/* initialises data members */
void initsparse ( struct sparse *p )
{
    p -> sp = NULL ;
}

/* dynamically creates the matrix of size MAX1 x MAX2 */
void create_array ( struct sparse *p )
{
    int n, i ;

    p -> sp = ( int * ) malloc ( MAX1 * MAX2 * sizeof ( int ) )  ;

    for ( i = 0 ; i < MAX1 * MAX2 ; i++ )
    {
        printf ( "Enter element no. %d:", i ) ;
        scanf ( "%d", &n ) ;

        * ( p -> sp + i ) = n ;
    }
}


/* counts the number of non-zero elements */
int count ( struct sparse s )
{
    int cnt = 0, i ;

    for ( i = 0 ; i < MAX1 * MAX2 ; i++ )
    {
        if ( * ( s.sp + i ) != 0 )
            cnt++ ;
    }
    return cnt ;
}

/* creates an array that stores information about non-zero elements */
void create_tuple ( struct sparse *p, struct sparse s )
{
    int r = 0 , c = -1, l = -1, i ;

    /* get the total number of non-zero elements
       and add 1 to store total no. of rows, cols, and non-zero values */

    p -> row = count ( s ) + 1 ;

    /* allocate memory */

    p -> sp = ( int * ) malloc ( p -> row * 3 * sizeof ( int ) ) ;

    /* store information about
       total no. of rows, cols, and non-zero values */

    * ( p -> sp + 0 ) = MAX1 ;
    * ( p -> sp + 1 ) = MAX2 ;
    * ( p -> sp + 2 ) = p -> row - 1 ;

    l = 2 ;

    /* scan the array and store info. about non-zero values
       in the 3-tuple */
    for ( i = 0 ; i < MAX1 * MAX2 ; i++ )
    {
        c++ ;

        /* sets the row and column values */
        if ( ( ( i % MAX2 ) == 0 ) && ( i != 0 ) )
        {
            r++ ;
            c = 0 ;
        }

        /* checks for non-zero element
           row, column and non-zero element value
           is assigned to the matrix */
        if ( * ( s.sp + i ) != 0 )
        {
            l++ ;
            * ( p -> sp + l ) = r ;
            l++ ;
            * ( p -> sp + l ) = c ;
            l++ ;
            * ( p -> sp + l ) = * ( s.sp + i ) ;
        }
    }
}

/* obtains transpose of an array */
void transpose ( struct sparse *p, struct sparse s )
{
    int x, q, pos_1, pos_2, col, elem, c, y ;

    /* allocate memory */

    p -> sp = ( int * ) malloc ( s.row * 3 * sizeof ( int ) ) ;
    p -> row = s.row ;

    /* store total number of rows, cols
       and non-zero elements */

    * ( p -> sp + 0 ) = * ( s.sp + 1 ) ;
    * ( p -> sp + 1 ) = * ( s.sp + 0 ) ;
    * ( p -> sp + 2 ) = * ( s.sp + 2 ) ;

    col = * ( p -> sp + 1 ) ;
    elem = * ( p -> sp + 2 ) ;

    if ( elem <= 0 )
        return ;

    x = 1 ;

    for ( c = 0 ; c < col ; c++ )
    {
        for ( y = 1 ; y <= elem ; y++ )
        {
            q = y * 3 + 1 ;
            if ( * ( s.sp + q ) == c )
            {
                pos_2 = x * 3 + 0 ;
                pos_1 = y * 3 + 1 ;
                * ( p -> sp + pos_2 ) = * ( s.sp + pos_1 ) ;

                pos_2 = x * 3 + 1 ;
                pos_1 = y * 3 + 0 ;
                * ( p -> sp + pos_2 ) = * ( s.sp + pos_1 ) ;

                pos_2 = x * 3 + 2 ;
                pos_1 = y * 3 + 2 ;
                * ( p -> sp + pos_2 ) = * ( s.sp + pos_1 ) ;

                x++ ;
            }
        }
    }
}

/* deallocates memory */
void delsparse ( struct sparse *p )
{
    free ( p -> sp ) ;
}
