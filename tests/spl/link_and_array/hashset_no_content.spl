include "../array/node_array.spl";
include "../include/slsset.spl";
//include "../list_set/delete.spl";
//include "../list_set/insert.spl";
//include "../list_set/contains.spl";

struct HashSet {
  var size: Int; /* the size of the set */
  var buckets: Array<Node>; /* the set elements */
}

function bucket_head(x: Node, a: Array<Node>, m: Map<ArrayCell<Node>, Node>) returns (c: ArrayCell<Node>)

//TODO triggers
function arrayseg_buckets_footprint(a: Array<Node>, FP0: Set<ArrayCell<Node>>) returns (FP1: Set<Node>) {
  // all nodes reachable from the head of the bucket are in the footprint
    (forall c: ArrayCell<Node>, x: Node :: c in FP0 && Reach(next, c.array[c.index], x) ==> x in FP1 || x == null) &&
  // all nodes in the footprint are reachable from the bucket head
    (forall x in FP1 :: Reach(next, bucket_head(x, a, array_state()).array[bucket_head(x, a, array_state()).index], x) && x != null) &&
  // the bucket heads are in the array's footprint
    (forall x in FP1 :: bucket_head(x, a, array_state()) in FP0
     @(matching x yields bucket_head(x, a, array_state()).array[bucket_head(x, a, array_state()).index]))
  // (forall c: ArrayCell<Node> :: c in FP0 ==> c == bucket_head(c.array[c.index], a, array_state())) 
}

predicate arrayseg_with_buckets(a: Array<Node>, lo: Int, hi: Int)(FP0: Set<ArrayCell<Node>>, FP1: Set<Node>) {
  0 <= lo && lo <= hi && hi <= a.length &&
  FP0 == arrayseg_footprint(a, lo, hi) &&
  FP1 == arrayseg_buckets_footprint(a, FP0) &&
  (forall c: ArrayCell<Node>, x: Node :: c in FP0 && x in FP1 && Reach(next, c.array[c.index], x) ==> bucket_head(x, a, array_state()) == c) &&
  (forall c: ArrayCell<Node> :: c in FP0 ==> Reach(next, c.array[c.index], null))
}

predicate array_with_buckets(a: Array<Node>)(FP0: Set<Array<Node>>, FP1: Set<ArrayCell<Node>>, FP2: Set<Node>) {
  FP0 == Set(a) &&
  arrayseg_with_buckets(a, 0, a.length, FP1, FP2)
}

//some ghost function that we can use for the spec of hash
function ghostHash(max: Int, value: Int) returns (res: Int) {
  res >= 0 && res < max
}

predicate hset(hset: HashSet)(FP0: Set<HashSet>, FP1: Set<Array<Node>>, FP2: Set<ArrayCell<Node>>, FP3: Set<Node>) {
  hset.size == hset.buckets.length &&
  FP0 == Set(hset) &&
  array_with_buckets(hset.buckets, FP1, FP2, FP3) &&
  //all the elts from a list have the same hash, and this is the index in the array
    //(forall i: Int, n: Node:: 0 <= i && i < hset.size && Btwn(next, hset.buckets[i], n, null) ==> ghostHash(hset.size, n.data) == i @(matching n yields ghostHash(hset.size, n.data)))
    //(forall v in FP3:: Btwn(next, hset.buckets[ghostHash(hset, v)], witness(v, FP3), null))
  true
}


procedure hash(size: Int, value: Int)
  returns (res: Int)
  requires 0 <= size
  ensures res == ghostHash(size, value)



procedure hashset_create(_size: Int) returns (res: HashSet)
  requires 0 < _size
  ensures hset(res)
{
  var new_set := new HashSet;
  new_set.buckets := new Array<Node>(_size);    

  var i := 0;
  while(i < _size)
    invariant i >= 0 && i <= _size
    invariant acc(new_set) &*& acc(new_set.buckets)
    invariant arrayseg_with_buckets(new_set.buckets, 0, i)
    invariant arrayseg(new_set.buckets, i, _size)
  {
    new_set.buckets[i] := null;
    i := i + 1;
  }
  new_set.size := _size;

  return new_set;
}



