include "../array/node_array.spl";
include "../include/slsset.spl";
//include "../list_set/delete.spl";
//include "../list_set/insert.spl";
//include "../list_set/contains.spl";

struct HashSet {
  var size: Int; /* the size of the set */
  var buckets: Array<Node>; /* the set elements */
}

function arrayseg_buckets_footprint(a: Array<Node>, FP0: Set<ArrayCell<Node>>) returns (FP1: Set<Node>) {
  // all nodes reachable from the head of the bucket are in the footprint
    (forall c: ArrayCell<Node>, x: Node :: c in FP0 && Btwn(next, c.array[c.index], x, null) ==> x in FP1 || x == null
     @(matching c yields c.array[c.index])) &&
  // all nodes in the footprint are reachable from the bucket head
    (forall x in FP1 :: Btwn(next, a[ghostHash(a.length, x.data)], x, null) && x != null
     @(matching x yields a[ghostHash(a.length, x.data)])) &&
  // the bucket heads are in the array's footprint
    (forall x in FP1 :: a.cells[ghostHash(a.length, x.data)] in FP0
     @(matching x yields a.cells[ghostHash(a.length, x.data)] ))
}

predicate arrayseg_with_buckets(a: Array<Node>, lo: Int, hi: Int)(FP0: Set<ArrayCell<Node>>, FP1: Set<Node>) {
  0 <= lo && lo <= hi && hi <= a.length &&
  FP0 == arrayseg_footprint(a, lo, hi) &&
  FP1 == arrayseg_buckets_footprint(a, FP0) &&
  (forall c: ArrayCell<Node>, x: Node :: c in FP0 && x in FP1 && Reach(next, c.array[c.index], x) ==> a.cells[ghostHash(a.length, x.data)] == c) &&
  (forall c: ArrayCell<Node> :: c in FP0 ==> Reach(next, c.array[c.index], null) @(matching c yields c.array[c.index])) &&
  //all the elts from a list have the same hash, and this is the index in the array
    (forall v in FP1 :: Btwn(next, a[ghostHash(a.length, v.data)], v, null) @(matching v yields a[ghostHash(a.length, v.data)]))
}

predicate array_with_buckets(a: Array<Node>)(FP0: Set<Array<Node>>, FP1: Set<ArrayCell<Node>>, FP2: Set<Node>) {
  FP0 == Set(a) &&
  arrayseg_with_buckets(a, 0, a.length, FP1, FP2)
}

//some ghost function that we can use for the spec of hash
function ghostHash(max: Int, value: Int) returns (res: Int) {
  res >= 0 && res < max
}

predicate hset(h: HashSet)(FP0: Set<HashSet>, FP1: Set<Array<Node>>, FP2: Set<ArrayCell<Node>>, FP3: Set<Node>) {
  h.size == h.buckets.length &&
  FP0 == Set(h) &&
  array_with_buckets(h.buckets, FP1, FP2, FP3) &&
  true
}


procedure hash(size: Int, value: Int)
  returns (res: Int)
  requires 0 <= size
  ensures res == ghostHash(size, value)
{
  assume false;
}


procedure hashset_create(_size: Int) returns (res: HashSet)
  requires 0 < _size
  ensures hset(res)
{
  var new_set := new HashSet;
  new_set.buckets := new Array<Node>(_size);    
  var i := 0;
  while (i < _size)
    invariant 0 <= i && i <= _size
    invariant acc(new_set) &*& acc(new_set.buckets)
    invariant arrayseg_with_buckets(new_set.buckets, 0, i)
    invariant arrayseg(new_set.buckets, i, _size)
  {
    new_set.buckets[i] := null;
    i := i + 1;
  }
  new_set.size := _size;

  return new_set;
}

procedure append(val: Int, x: Node) 
  returns (res: Node)
  requires lseg(x, null)
  ensures lseg(res, null)
{
  res := new Node;
  res.next := x;
  res.data := val;
}

procedure insert(lst: Node, val: Int) 
  returns (res: Node)
  requires lseg(lst, null)
  ensures lseg(res, null)
{
  var curr: Node;
  curr := lst;
  var prev: Node;
  prev := null;
  
  while (curr != null && curr.data < val)
    invariant (prev == null && curr == lst || val > prev.data &*& prev.next |-> curr) -** 
      lseg(lst, null)
  {
    prev := curr;
    curr := curr.next;
  }
  
  if (curr != null && curr.data == val) {
    return lst;
  }
  
  var n: Node;
  n := append(val, curr);
  
  if (prev == null) {
    return n;
  } else {
    prev.next := n;
    return lst;
  }
}

procedure hashset_add(hashset: HashSet, value: Int)
  requires hset(hashset)
  ensures hset(hashset)
{
  var hashval := hash(hashset.size, value);
  //assert hset(hashset);
  var list := hashset.buckets[hashval];
  //assert lseg(list, null) -** hset(hashset);
  hashset.buckets[hashval] := insert(list, value);
}

procedure contains(lst: Node, value: Int) 
  returns (res: Bool)
  requires lseg(lst, null)
  ensures lseg(lst, null)
  
procedure hashset_member(hashset: HashSet, value: Int)
  returns (res: Bool)
  requires hset(hashset)
  ensures hset(hashset)
{
  var hashval := hash(hashset.size, value);
  var list := hashset.buckets[hashval];
  return contains(list, value);
}


procedure delete(lst: Node, value: Int) 
  returns (res: Node)
  requires lseg(lst, null)
  ensures lseg(res, null)

procedure hashset_remove(hashset: HashSet, value: Int)
  requires hset(hashset)
  ensures hset(hashset)
{
  var hashval := hash(hashset.size, value);
  var list := hashset.buckets[hashval];
  hashset.buckets[hashval] := delete(list, value);
}


procedure hashset_free(hashset: HashSet)
  requires hset(hashset)
  ensures emp
{
  var i := 0;
  while(i < hashset.size)
    invariant 0 <= i && i <= hashset.size
    invariant acc(hashset) &*& acc(hashset.buckets)
    invariant hashset.size == hashset.buckets.length
    invariant arrayseg(hashset.buckets, 0, i) &*& arrayseg_with_buckets(hashset.buckets, i, hashset.size)
  {
    var list := hashset.buckets[i];
    while(list != null)
      invariant lseg(list, null)
    {
      var temp := list;
      list := list.next;
      free(temp);
    }
    i := i + 1;
  }
  free(hashset.buckets);
  free(hashset);
}
