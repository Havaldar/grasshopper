// Structure and predicate declarations for sorted singly-linked lists

struct Node {
  var next: Node;
  var data: Int;
}

predicate lseg(x: Node, y: Node) {
  x == y || x != y &*& acc(x) &*& lseg(x.next, y)
}

predicate uslseg(x: Node, y: Node, lb: Int) {
  x == y || x != y &*& acc(x) &*& lb <= x.data &*& uslseg(x.next, y, x.data)
}

predicate ulseg(x: Node, y: Node, lb: Int) {
  x == y || x != y &*& acc(x) &*& lb <= x.data &*& ulseg(x.next, y, lb)
}

predicate slseg(x: Node, y: Node) {
  x == y || x != y &*& acc(x) &*& uslseg(x.next, y, x.data)
}

predicate llseg(x: Node, y: Node, ub: Int) {
  x == y || x != y &*& acc(x) &*& x.data <= ub &*& llseg(x.next, y, ub)
}

predicate lslseg(x: Node, y: Node, ub: Int) {
  slseg(x, y) && llseg(x, y, ub)
}

predicate blseg(x: Node, y: Node, lb: Int, ub: Int) {
  x == y || 
  x != y &*& acc(x) &*& lb <= x.data &*& x.data <= ub &*& blseg(x.next, y, lb, ub)
}

predicate bslseg(x: Node, y: Node, lb: Int, ub: Int) {
  x == y || 
  x != y &*& acc(x) &*& lb <= x.data &*& x.data <= ub &*& bslseg(x.next, y, x.data, ub)
}
