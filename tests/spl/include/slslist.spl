// Structure and predicate declarations for sorted singly-linked lists

struct Node {
  var next: Node;
  var data: Int;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Btwn(next, x, y, y)
}

predicate lseg_lowerbound(lb: Int, FP: Set<Node>)
  requires acc(FP)
{
  forall z: Node :: z in FP ==> lb <= z.data
}

predicate lseg_upperbound(ub: Int, FP: Set<Node>)
  requires acc(FP)
{
  forall z: Node :: z in FP ==> z.data <= ub
}

predicate lseg_increasing(x: Node, FP: Set<Node>)
  requires acc(FP)
{
  forall y: Node, z: Node :: y in FP && z in FP && Btwn(next,x,y,z) ==> y.data <= z.data
}

predicate lseg_strictly_increasing(x: Node, FP: Set<Node>)
  requires acc(FP)
{
  forall y: Node, z: Node :: y in FP && z in FP && Btwn(next,x,y,z) ==> y.data < z.data || y == z
}

predicate lseg_decreasing(x: Node, FP: Set<Node>)
  requires acc(FP)
{
  forall y: Node, z: Node :: y in FP && z in FP && Btwn(next,x,y,z) ==> z.data <= y.data
}

predicate uslseg(x: Node, y: Node, lb: Int) {
  exists X: Set<Node> ::
    (lseg(x, y) && acc(X)) &*&
    lseg_lowerbound(lb, X) &*&
    lseg_increasing(x, X)
}

predicate ulseg(x: Node, y: Node, lb: Int) {
  exists X: Set<Node> ::
    (lseg(x, y) && acc(X)) &*&
    lseg(x, y, X) &*&
    lseg_lowerbound(lb, X)
}

/*
predicate slseg(x: Node, y: Node)(FP: Set<Node>) {
  lseg(x, y, FP) &&
  lseg_increasing(x, FP)
}

predicate rslseg(x: Node, y: Node)(FP: Set<Node>) {
  lseg(x, y, FP) &&
  lseg_decreasing(x, FP)
}

predicate llseg(x: Node, y: Node, ub: Int)(FP: Set<Node>) {
  lseg(x, y, FP) &&
  lseg_upperbound(ub, FP)
}

predicate lslseg(x: Node, y: Node, ub: Int)(FP: Set<Node>) {
  lseg(x, y, FP) &&
  lseg_upperbound(ub, FP) &&
  lseg_increasing(x, FP)
}

predicate blseg(x: Node, y: Node, lb: Int, ub: Int)(FP: Set<Node>) {
  lseg(x, y, FP) &&
  lseg_lowerbound(lb, FP) &&
  lseg_upperbound(ub, FP)
}

predicate bslseg(x: Node, y: Node, lb: Int, ub: Int)(FP: Set<Node>) {
  lseg(x, y, FP) &&
  lseg_lowerbound(lb, FP) &&
  lseg_upperbound(ub, FP) &&
  lseg_increasing(x, FP)
}
*/
