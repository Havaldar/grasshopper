// Structure and predicate declarations for unbounded skip lists

struct SkipList {
  var max: Int;
  var height: Int;
  var head: Node;
}

struct Node {
  var data: Int;
  var next: Node[];
}

function skiplist_footprint(x: Node) returns (FP: Set<Loc>) {
  forall z: Loc :: z in FP == (Btwn(next[0], x, z, null) && z != null)
}

predicate skiplist_hierarchy(height: Int, FP: Set<Loc>) {
  (forall h1: Int, h2: Int :: 
   0 <= h1 && h1 <= h2 && h2 <= height ==> 
   (forall x: Node, y: Node, z: Node ::
    x in FP && y in FP && z in FP && Btwn(next[h2], x, y, z) ==>
    Btwn(next[h1], x, y, z)))
}

predicate skiplist_sorted(x: Node, FP: Set<Loc>) {
  forall y: Node, z: Node :: 
    y in FP && z in FP && Btwn(next[0], x, y, z) ==> y.data <= z.data
}

predicate sub_skiplist(x: Node, y: Node, height: Int, FP: Set<Loc>) {
  Btwn(next[0], x, y, y) && 
  FP == sub_skiplist_footprint(x, y)
}

predicate skiplist_reach_null(height: Int, x: Node) {
  forall h: Int :: 0 <= h && h <= height ==> Btwn(next[h], x, null, null)
}

predicate skiplist(l: SkipList, FP: Set<Loc>) {
  0 < l.max_height &&
  0 <= l.height && l.height < l.max_height && 
  (exists FP1: Set<Loc> :: 
   skiplist_reach_null(l.height, x) &&
   skiplist_hierarchy(l.height, FP1) &&
   skiplist_sorted(l.head, FP1) &&
   sub_skiplist(l.head, null, l.height, FP1) && 
   FP == skiplist_footprint(x.head) ++ Set<Loc>(l))
}

