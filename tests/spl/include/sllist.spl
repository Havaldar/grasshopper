// Structure and predicate declarations for singly-linked lists

struct Node {
  var next: Node;
}

function lseg_footprint(x: Node, y: Node) returns (FP: Set<Node>) {
  forall z: Node :: z in FP == (Btwn(next, x, z, y) && z != y)
}

predicate lseg(x: Node, y: Node, FP: Set<Node>) {
  Btwn(next, x, y, y) && FP == lseg_footprint(x, y)
}

