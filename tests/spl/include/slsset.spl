// structure and predicate declarations for set implementation 
// based on sorted singly-linked lists

include "slslist.spl";

function witness(v: Int, C: Set<Int>) returns (res: Node) {
  true
}



function content(FP: Set<Node>) returns (C: Set<Int>) {
  (forall x in FP :: x == witness(x.data, C)) &&
  (forall v in C :: witness(v, C) in FP) &&
  (forall v: Int :: v !in C ==> witness(v, C) == null) &&
  (forall v in C :: v == witness(v, C).data)
}

predicate sorted_set(x: Node, y: Node, C: Set<Int>, FP: Set<Node>) {
  lseg(x, y, FP) &&
  lseg_strictly_increasing(x, FP) &&
  C == content(FP)
}
