// structure and predicate declarations for set implementation 
// based on sorted singly-linked lists

include "slslist.spl";

function witness(v: Int, d: Map<Node, Int>, FP: Set<Node>) returns (res: Node) {
  true
}

function content(FP: Set<Node>) returns (C: Set<Int>) {
  (forall x: Node :: x in FP ==> x == witness(x.data, data, FP)) &&
  (forall x: Node :: x in FP ==> x.data in C) &&
    (forall v in C :: witness(v, data, FP) in FP) &&
    (forall v: Int :: v !in C ==> witness(v, data, FP) == null) &&
    (forall v in C :: v == witness(v, data, FP).data @(matching v yields witness(v, data, FP).data))
}

predicate list_set(x: Node, y: Node, C: Set<Int>)(FP: Set<Node>) {
  lseg(x, y, FP) &&
  lseg_strictly_increasing(x, FP) &&
  C == content(FP)
}
