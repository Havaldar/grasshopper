// Structure and predicate declarations for nested lists with head pointers

struct OuterNode {
  var onext: OuterNode;
  var down: InnerNode;
}

struct InnerNode {
  var inext: InnerNode;
  var head: OuterNode;
}

predicate lseg(x: InnerNode, y: InnerNode) {
  Reach(inext, x, y) &*&
  acc({ z: InnerNode :: Btwn(inext, x, z, y) && z != y })
}

function nlseg_inner_footprint(x: OuterNode, y: OuterNode, X: Set<OuterNode>) 
  returns (FP: Set<InnerNode>)
  requires olseg(x, y) && acc(X)
  ensures forall z in FP :: z.head in X
  ensures forall z in FP, zh: OuterNode :: zh == z.head ==>
   /* z in lseg_footprint(zh.down, null) */
     Btwn(inext, zh.down, z, null) && z != null
     @(matching z yields z.head.down)
     @(matching zh yields zh.down.head)
  ensures forall zh in X, z: InnerNode :: Btwn(inext, zh.down, z, null) && z != null ==> z in FP


predicate olseg(x: OuterNode, y: OuterNode) {
  Reach(onext, x, y) &*&
  acc({ z: OuterNode :: Btwn(onext, x, z, y) && z != y })
}

predicate nlseg(x: OuterNode, y: OuterNode) {
  exists X: Set<OuterNode> ::
    olseg(x, y) && acc(X) &*&
    acc(nlseg_inner_footprint(x, y, X)) &*&
    (forall u in X, v in nlseg_inner_footprint(x, y, X) :: Reach(inext, u.down, v) ==> v.head == u) &&
    (forall u in X :: Reach(inext, u.down, null))
}
