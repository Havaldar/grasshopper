struct OuterNode {
  var onext: OuterNode;
  var down: InnerNode;
}

struct InnerNode {
  var inext: InnerNode;
  var head: OuterNode;
}

function lseg_footprint(x: InnerNode, y: InnerNode) returns (FP: Set<Loc>) {
  forall z: Loc :: z in FP == (Btwn(inext, x, z, y) && z != y)
}

predicate lseg(x: InnerNode, y: InnerNode, FP: Set<Loc>) {
  Reach(inext, x, y) && 
  FP == lseg_footprint(x, y)
}

function llseg_outer_footprint(x: OuterNode, y: OuterNode) 
  returns (FP: Set<Loc>) 
{
  forall z: Loc :: z in FP == (Btwn(onext, x, z, y) && z != y)
}

function llseg_inner_footprint(x: OuterNode, y: OuterNode) 
  returns (FP: Set<Loc>) 
{
  (forall z: Loc, zh: Loc :: z in FP && zh == z.head ==>
    //zh in llseg_outer_footprint(x, y) && 
    Btwn(onext, x, zh, y) && zh != y &&
    Btwn(inext, zh.down, z, null)
    @(matching z yields z.head)
    @(matching zh yields zh.down)) &&
  (forall z: Loc, zh: Loc :: 
    zh == z.head && 
    //zh in llseg_outer_footprint(x, y) &&
    Btwn(onext, x, zh, y) && zh != y &&
    Btwn(inext, zh.down, z, null) ==>
      z in FP)
}

predicate llseg(x: OuterNode, y: OuterNode, FP: Set<Loc>) {
  Reach(onext, x, y) &&
  (forall u: InnerNode, v: InnerNode :: 
    u in llseg_inner_footprint(x, y) && v in llseg_inner_footprint(x, y) ==>
     (u.head == v.head) == (Reach(inext, u, v) || Reach(inext, v, u))) &&
  (forall u: OuterNode :: u in llseg_outer_footprint(x, y) ==>
    Reach(inext, u.down, null)) &&
  // the following two constraints should be implied by the types but are not yet
  llseg_outer_footprint(x, y) <= OuterNode &&
  llseg_inner_footprint(x, y) <= InnerNode &&
  FP == llseg_outer_footprint(x, y) ++ llseg_inner_footprint(x, y)
}
