struct OuterNode {
  var onext: OuterNode;
  var down: InnerNode;
}

struct InnerNode {
  var inext: InnerNode;
  var head: OuterNode;
}

function lseg_footprint(x: InnerNode, y: InnerNode) returns (FP: Set<Loc>) {
  forall z: Loc :: z in FP == (Btwn(inext, x, z, y) && z != y)
}

predicate lseg(x: InnerNode, y: InnerNode, FP: Set<Loc>) {
  Btwn(inext, x, y, y) && 
  FP == lseg_footprint(x, y)
}

function llseg_outer_footprint(x: OuterNode, y: OuterNode) 
  returns (FP: Set<Loc>) 
{
  forall z: Loc :: z in FP == Btwn(onext, x, z, y) && z != y
}

function llseg_inner_footprint(x: OuterNode, y: OuterNode) 
  returns (FP: Set<Loc>) 
{
  forall z: Loc :: z in FP ==
    (z.head in llseg_outer_footprint(x, y) && Btwn(inext, z.head.down, z, null))
}

predicate llseg(x: OuterNode, y: OuterNode, FP: Set<Loc>) {
  Btwn(onext, x, y, y) &&
  (forall u: InnerNode, v: InnerNode :: 
    u in llseg_inner_footprint(x, y) && v in llseg_inner_footprint(x, y) ==>
     (u.head == v.head) == (Reach(inext, u, v) || Reach(inext, v, u))) &&
  FP == llseg_outer_footprint(x, y) ++ llseg_inner_footprint(x, y)
}


procedure traverse(x: OuterNode, y: OuterNode)
  requires llseg(x, y)
  ensures llseg(x, y)
{
  var oc: OuterNode := x;
  while (oc != y)
    invariant (oc == y || acc(oc)) -** llseg(x, y)
  {
    var ic: InnerNode := oc.down;
    while (ic != null)
      invariant acc(oc)
      invariant (ic == null || acc(ic)) -** lseg(oc.down, null)
    {
      ic := ic.inext;
    }
    oc := oc.onext;
  }
}
