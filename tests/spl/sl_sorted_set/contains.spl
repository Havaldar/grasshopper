struct Node {
  var next: Node;
  var data: Int;
}

predicate sorted_set_lb(x: Node, y: Node, lb: Int, c: Set<Int>) {
    x == y &*&
    c == Set<Int>()
  || 
    x != y &*&
    acc(x) &*&
    x.data in c &*&
    lb < x.data &*&
    sorted_set_lb(x.next, y, x.data, c -- Set(x.data))
}

predicate sorted_set(x: Node, y: Node, c: Set<Int>) {
    x == y &*&
    c == Set<Int>()
  || 
  sorted_set_lb(x, y, x.data - 1, c)
}

procedure contains(lst: Node, val: Int, implicit ghost content: Set<Int>)
  returns (res: Bool)
  requires sorted_set(lst, null, content);
  ensures (res == val in content) &*& sorted_set(lst, null, content);
{
  var curr: Node;
  curr := lst;
  var c1: Set<Int>, c2: Set<Int>;
  c1 := content;
  c2 := Set<Int>();
  var prev: Node;
  prev := null;
  while (curr != null && curr.data < val) 
    invariant prev == null && curr == lst && c2 == Set<Int>() || 
                (val > prev.data && prev != curr && prev.next == curr && 
                Btwn(next,lst,prev,curr)) &*& sorted_set(lst, curr, c2);
    invariant sorted_set(curr, null, c1) &*& content == c1 ++ c2;
    invariant prev == null || curr == null || prev.data < curr.data;
  {
    c1 := c1 -- Set(curr.data);
    c2 := c2 ++ Set(curr.data);
    prev := curr;
    curr := curr.next;
  }
  if (curr != null && curr.data == val) return true;
  else return false;
}
