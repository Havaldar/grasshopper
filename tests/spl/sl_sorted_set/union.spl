include "../include/slsset.spl";

procedure union(lst1: Node, lst2: Node,
                implicit ghost content1: Set<Int>, implicit ghost content2: Set<Int>)
  returns (res: Node)
  requires sorted_set(lst1, null, content1) &*& sorted_set(lst2, null, content2);
  ensures sorted_set(res, null, content1 ++ content2);
{
    if (lst1 == null) {
        return lst2;
    } else if (lst2 == null) {
        return lst1;
    } else if (lst1.data < lst2.data) {
        lst1.next := union(lst1.next, lst2);
        return lst1;
    } else if (lst1.data > lst2.data) {
        lst2.next := union(lst1, lst2.next);
        return lst2;
    } else { //lst1.data == lst2.data
        var n: Node;
        n := lst1.next;
        free(lst1);
        return union(n, lst2);
    }
}
