struct Node {
  var next: Node;
  var data: int;
}

predicate sorted_set(x: Node, y: Node, lb: int, ub: int, c: set<int>) {
    x == y &*&
    c == set<int>()
  || 
    x != y &*&
    acc(x) &*&
    x.data in c &*&
    lb <= x.data &*&
    x.data < ub &*&
    sorted_set(x.next, y, x.data + 1, ub, c -- set(x.data))
}

procedure insert( lst: Node, val: int,
                  ghost lb: int, ghost ub: int,
                  implicit ghost content: set<int>)
  returns (res: Node)
  requires sorted_set(lst, null, lb, ub, content);
  requires val >= lb &*& val <= ub;
  ensures sorted_set(res, null, lb, ub, content ++ set(val));
{
  var curr: Node, prev: Node;
  curr := lst;
  prev := null;
  var c1: set<int>, c2: set<int>;
  c1 := content;
  c2 := set<int>();

  while (curr != null && curr.data < val)
    invariant  prev == null
           || (prev.next |-> curr &*& prev.data < curr.data &*&
               sorted_set(lst, prev, lb, prev.data, c2)); 
    invariant sorted_set(curr, null, prev.data, ub, c1);
    invariant content == c1 ++ c2;
  {
    c2 := c2 ++ set(curr.data);
    c1 := c1 ++ set(curr.data);
    prev := curr;
    curr := curr.next; 
  }

  var n: Node;

  if (curr != null && curr.data == val) {
    n := curr;
  } else {
    n := new Node;
    n.next := curr;
    n.data := val;
  }

  if (prev != null) {
    prev.next := n;
    return lst;
  } else {
    return n;
  }

}
