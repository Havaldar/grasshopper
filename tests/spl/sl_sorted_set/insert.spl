include "../include/slsset.spl";

procedure insert(lst: Node, val: Int, implicit ghost content: Set<Int>)
  returns (res: Node)
  requires sorted_set(lst, null, content);
  ensures sorted_set(res, null, content ++ Set(val));
{
  var n: Node;  
  if (lst == null || val < lst.data) {
    n := new Node;
    n.next := lst;
    n.data := val;
    return n;
  } else if (val == lst.data) {
    return lst;
  }

  var curr: Node;
  curr := lst;
  while (curr.next != null && curr.next.data < val)
    invariant exists C1: Set<Int> :: acc(curr) -** sorted_set(lst, curr.next, C1) -** sorted_set(lst, null, content) &*& val !in C1;
    invariant forall x: Node :: Btwn(next, lst, x, curr) ==> x.data < val;
  {
    curr := curr.next; 
  }
  if (curr.next != null && curr.next.data == val) {
    return lst;
  }
  n := new Node;
  n.next := curr.next;
  n.data := val;
  curr.next := n;
  return lst;
}
