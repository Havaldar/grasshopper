struct Node {
  var next: Node;
  var data: Int;
}


predicate blseg(x: Node, y: Node, lb: Int, ub: Int) {
  x == y || x != y &*& acc(x) &*& lb <= x.data &*& x.data <= ub &*& blseg(x.next, y, lb, ub)
}

predicate bslseg(x: Node, y: Node, lb: Int, ub: Int) {
  x == y || x != y &*& acc(x) &*& lb <= x.data &*& x.data <= ub &*& bslseg(x.next, y, x.data, ub)
}

//quicksort: the postcondition of split was too weak and gave a panhandle list.

procedure predecessor(start: Node, end: Node, ghost lb: Int, ghost ub: Int) returns (prv: Node)
    requires blseg(start, end, lb, ub);
    requires start != end;
    ensures blseg(start, prv, lb, ub);
    ensures acc(prv) &*& prv.next == end;
    ensures prv != end;
    ensures prv.data >= lb &*& prv.data <= ub;
{
    var prv: Node;
    prv := start;
    while (prv.next != end)
        invariant blseg(start, prv, lb, ub);
        invariant blseg(prv, end, lb, ub);
        invariant prv != end;
        invariant prv.data >= lb &*& prv.data <= ub;
    {
        prv := prv.next;
    }
    return prv;
}

procedure split(lst: Node, tsl: Node, lb: Int, ub: Int) returns (res: Node)
    requires blseg(lst, tsl, lb, ub) &*& lst != tsl;
    ensures  blseg(lst, res, lb, res.data);
    ensures  blseg(res, tsl, res.data, ub) &*& res != tsl;
    ensures  res.data >= lb &*& res.data <= ub;
{
    var pivot: Node, start: Node, end: Node;
    pivot := predecessor(lst, tsl, lb, ub);
    end := pivot;
    start := lst;
    while (start != end)
        invariant blseg(lst, start, lb, pivot.data);
        invariant blseg(start, end, lb, ub);
        invariant blseg(end, pivot, pivot.data, ub);
        invariant pivot.next |-> tsl; 
        invariant pivot.data >= lb;
        invariant pivot.data <= ub;
    {
        if (start.data <= pivot.data) {
            start := start.next;
        } else if (end.data > pivot.data) {
            end := predecessor(start, end, lb, ub);
        } else {
            var tmp: Int;
            tmp := start.data;
            start.data := end.data;
            end.data := tmp;
        }
    }
    var tmp2: Int;
    tmp2 := pivot.data;
    pivot.data := end.data;
    end.data := tmp2;
    return end;
}


procedure quicksort(lst: Node, tsl: Node, ghost lb: Int, ghost ub: Int)
    requires blseg(lst, tsl, lb, ub);
    ensures  bslseg(lst, tsl, lb, ub);
{
    if (lst != tsl && lst.next != tsl) {
      var pivot: Node;
      pivot := split(lst, tsl, lb, ub);
      quicksort(lst, pivot, lb, pivot.data);
      quicksort(pivot.next, tsl, pivot.data, ub);
    }
}
