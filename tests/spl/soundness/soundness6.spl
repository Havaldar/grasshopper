include "../include/slsset.spl";

procedure traverse(lst: Node, val: Int,
                   implicit ghost content: Set<Int>)
  requires list_set(lst, null, content)
  ensures list_set(lst, null, content)
{
  var curr: Node;
  curr := lst;
  var c1: Set<Int>, c2: Set<Int>;
  c1 := content;
  c2 := Set<Int>();

  while (curr != null) 
    //the case split is needed because of curr.data
    invariant (curr != null &*& list_set(lst, curr, c2) &*& list_set(curr, null, c1))
           || (curr == null &*& list_set(lst, curr, c2) &*& c1 == Set<Int>())
    invariant content == c1 ++ c2
        //invariant curr == null || (curr.data >= lb && curr.data < ub)
  {
    c1 := c1 ++ Set(curr.data); //BUG here: should be --
    c2 := c2 ++ Set(curr.data);
    curr := curr.next; 
  }
}
