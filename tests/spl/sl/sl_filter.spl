struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  x == y || x != y &*& acc(x) &*& lseg(x.next, y)
}

procedure filter(x: Node) returns (res: Node)
  requires lseg(x, null);
  ensures lseg(res, null);
{
  var prv: Node, curr: Node;
  prv := null;
  curr := x;
  res := x;
  while (curr != null) 
    invariant lseg(res, prv) &*& prv.next |-> curr || prv == null &*& res == curr;
    invariant lseg(curr, null);
  {
    var old_curr: Node;
    old_curr := curr;
    curr := curr.next; 
    var nondet: bool;
    if (nondet) {
      if (prv != null) {
        prv.next := old_curr.next;
      } else {
        res := old_curr.next;
      }
      free old_curr;
    } else {
      prv := old_curr;
    }
  }
}
