struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  x == y || x != y &*& acc(x) &*& lseg(x.next, y)
}

procedure traverse1(lst: Node)
  requires lseg(lst, null);
  ensures lseg(lst, null);
{
  var curr: Node;
  curr := lst;
  while (curr != null) 
    invariant lseg(lst, curr);
    invariant lseg(curr, null);
  {
    curr := curr.next; 
  }
}

procedure traverse2(lst: Node)
  requires lseg(lst, null);
  ensures lseg(lst, null);
{
  var curr: Node;
  if (lst != null) {
    curr := lst;
    while (curr.next != null) 
      invariant lseg(lst, curr);
      invariant lseg(curr, null);
    {
      curr := curr.next; 
    }
  
  }
}
