include "../include/sllist.spl";

procedure insert(lst: Node, elt: Node) 
  returns (res: Node)
  requires lseg(lst, null) &*& elt.next |-> null
  ensures lseg(res, null)
{
  if (lst == null)
    return elt;
  else {
    var nondet: Bool;
    var curr := lst;
    while (nondet && curr.next != null) 
      invariant acc(curr) -** lseg(lst, null)
    {
      havoc nondet;
      curr := curr.next;
    }
    elt.next := curr.next;
    curr.next := elt;
    return lst;
  }
}

procedure insert_head(lst: Node)
  returns (w: Node)
  requires lseg(lst, null)
  ensures lseg(w, null)
{
  var w: Node := new Node;
  w.next := lst;
}

// The above one doesn't work, but this does
procedure insert_head1(lst: Node, w: Node)
  requires lseg(lst, null) &*& acc(w)
  ensures lseg(w, null)
{
  w.next := lst;
}
