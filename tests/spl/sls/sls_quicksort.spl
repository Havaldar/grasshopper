struct Node {
  var next: Node;
  var data: Int;
}

predicate blseg(x: Node, y: Node, lb: Int, ub: Int) {
  x == y || 
  x != y &*& acc(x) &*& lb <= x.data &*& x.data <= ub &*& blseg(x.next, y, lb, ub)
}

predicate bslseg(x: Node, y: Node, lb: Int, ub: Int) {
  x == y || 
  x != y &*& acc(x) &*& lb <= x.data &*& x.data <= ub &*& bslseg(x.next, y, x.data, ub)
}

procedure split(x: Node, y: Node, lb: Int, ub: Int) returns (pivot: Node)
  requires blseg(x, y, lb, ub) &*& x != y;
  ensures  blseg(x, pivot, lb, pivot.data);
  ensures  blseg(pivot, y, pivot.data, ub) &*& pivot != y;
  ensures  lb <= pivot.data &*& pivot.data <= ub;
  ensures  Btwn(next, x, pivot, y);
{
  var curr: Node;
  curr := x.next;
  pivot := x;

  while (curr != y) 
    invariant blseg(x, pivot, lb, pivot.data);
    invariant blseg(pivot, curr, pivot.data, ub) &*& pivot != curr;
    invariant blseg(curr, y, lb, ub);
    invariant lb <= pivot.data &*& pivot.data <= ub;
    invariant Btwn(next, x, pivot, y);
    invariant Btwn(next, pivot, curr, y);
  {
    if (curr.data < pivot.data) {
      var tmp: Int;
      tmp := curr.data;
      curr.data := pivot.next.data;
      pivot.next.data := pivot.data;
      pivot.data := tmp;
      pivot := pivot.next;
    }
    curr := curr.next;
  }
}

procedure quicksort(x: Node, y: Node, ghost lb: Int, ghost ub: Int)
  requires blseg(x, y, lb, ub);
  ensures  bslseg(x, y, lb, ub);
{
  if (x != y && x.next != y) {
    var pivot: Node;
    pivot := split(x, y, lb, ub);
    quicksort(x, pivot, lb, pivot.data);
    quicksort(pivot.next, y, pivot.data, ub);
  }
}
