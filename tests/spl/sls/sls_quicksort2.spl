struct Node {
  var next: Node;
  var prev: Node;
  var data: int;
}

predicate bdlseg(x: Node, u: Node, y: Node, v: Node, lb: int, ub: int) {
  x == y && u == v || 
  x != y &*& x.prev == u &*& acc(x) &*& bdlseg(x.next, x, y, v, lb, ub) &*& lb <= x.data &*& x.data <= ub
}

predicate bsdlseg(x: Node, u: Node, y: Node, v: Node, lb: int, ub: int) {
  x == y && u == v || 
  x != y &*& x.prev == u &*& acc(x) &*& bsdlseg(x.next, x, y, v, x.data, ub) &*& lb <= x.data &*& x.data <= ub
}

procedure quicksort(lst: Node, tsl: Node,
                    ghost before: Node, ghost after: Node,
                    ghost lb: int, ghost ub: int)
    requires bdlseg(lst, before, after, tsl, lb, ub) &*& tsl.next == after;
    ensures bsdlseg(lst, before, after, tsl, lb, ub);
{
    if (lst == tsl || lst == tsl.next) {
    } else {
        var pivot: Node, start: Node, end: Node;
        pivot := tsl.prev;
        end := pivot;
        start := lst;
        while (start != end)
            invariant bdlseg(lst, before, start, start.prev, lb, pivot.data);
            invariant bdlseg(start, start.prev, end, end.prev, lb, ub);
            invariant bdlseg(end, end.prev, tsl, pivot, pivot.data, ub);
            invariant pivot.data >= lb;
            invariant pivot.data <= ub;
        {
            if (start.data <= pivot.data) {
                start := start.next;
            } else if (end.data > pivot.data) {
                end := end.prev;
            } else {
                var tmp: int;
                tmp := start.data;
                start.data := end.data;
                end.data := tmp;
            }
        }
        var tmp2: int;
        tmp2 := pivot.data;
        pivot.data := end.data;
        end.data := tmp2;
        pivot := end;
        quicksort(lst, pivot, before, pivot.next, lb, pivot.data);
        quicksort(pivot.next, tsl, pivot, after, pivot.data, ub);
    }
}
