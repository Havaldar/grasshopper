struct Node {
  var next: Node;
  var data: int;
}


predicate blseg(x: Node, y: Node, lb: int, ub: int) {
  x == y || x != y &*& acc(x) &*& lb <= x.data &*& x.data <= ub &*& blseg(x.next, y, lb, ub)
}

predicate bslseg(x: Node, y: Node, lb: int, ub: int) {
  x == y || x != y &*& acc(x) &*& lb <= x.data &*& x.data <= ub &*& bslseg(x.next, y, x.data, ub)
}


procedure predecessor(start: Node, end: Node, lb: int, ub: int) returns (prv: Node)
    requires blseg(start, end, lb, ub) &*& start != end;
    ensures blseg(start, prv, lb, ub) &*&
            acc(prv) &*& prv.next == end &*&
            prv != end &*&
            prv.data >= lb &*& prv.data <= ub;
{
    var prv: Node;
    prv := start;
    while (prv.next != end)
        invariant blseg(start, prv, lb, ub);
        invariant blseg(prv, end, lb, ub);
        invariant prv != end;
        invariant prv.data >= lb &*& prv.data <= ub;
    {
        prv := prv.next;
    }
    return prv;
}

procedure quicksort(lst: Node, tsl: Node, lb: int, ub: int) //returns (lst: Node)
    requires blseg(lst, tsl, lb, ub);
    ensures bslseg(lst, tsl, lb, ub);
{
    if (lst == tsl || lst.next == tsl) {
    } else {
        var pivot: Node, start: Node, end: Node;
        pivot := predecessor(lst, tsl, lb, ub);
        end := pivot;
        start := lst;
        while (start != end)
            invariant blseg(lst, start, lb, pivot.data);
            invariant blseg(start, end, lb, ub);
            invariant blseg(end, pivot, pivot.data, ub);
            invariant acc(pivot) &*& pivot.next == tsl; 
            invariant pivot.data >= lb;
            invariant pivot.data <= ub;
        {
            if (start.data <= pivot.data) {
                start := start.next;
            } else if (end.data > pivot.data) {
                end := predecessor(start, end, lb, ub);
            } else {
                var tmp: int;
                tmp := start.data;
                start.data := end.data;
                end.data := tmp;
            }
        }
        var tmp2: int;
        tmp2 := pivot.data;
        pivot.data := end.data;
        end.data := tmp2;
        pivot := end;
        //pivot := split(lst, end, lb, ub);
        quicksort(lst, pivot, lb, pivot.data);
        quicksort(pivot.next, tsl, pivot.data, ub);
    }
}
