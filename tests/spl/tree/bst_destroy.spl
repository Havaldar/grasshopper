struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: int;
}

predicate tree(x: Node, y: Node) {
    x == null
  ||
    x != null &*&
    x.parent |-> y &*&
    tree(x.left, x) &*&
    tree(x.right, x)
}

predicate treeAllocInvariant(X: set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure destroy(root: Node, p: Node)
  requires tree(root, p);
  requires treeAllocInvariant(Alloc);
  ensures treeAllocInvariant(Alloc);
  ensures emp;
{
    if (root != null) {
        destroy(root.left, root);
        destroy(root.right, root);
        root.parent := null;
        free root;
    }
}

