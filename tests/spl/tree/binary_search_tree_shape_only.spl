include "../include/bstree.spl";

procedure extract_max(root: Node)
returns (others: Node, max: Node)
  requires tree(root) &*& root != null;
  ensures  tree(others) &*& acc(max);
  ensures  max.right == null && max.parent == null;
{
  if (root.right != null) {
    var c: Node, m: Node;
    c, m := extract_max(root.right); 
    root.right := c;
    if (c != null) {c.parent := root;}
    return root, m;
  } else {
    var c: Node;
    c := root.left;
    root.parent := null;
    return c, root;
  }
}

procedure insert(root: Node, value: Int)
returns (new_root: Node)
  requires tree(root);
  ensures tree(new_root);
{
  if (root == null) {
    var t: Node;
    t := new Node;
    t.left := null;
    t.right := null;
    t.data := value;
    return t;
  } else { 
    var n: Node;
    if (root.data > value) {
      n := insert(root.left, value);
      root.left := n;
      if (n != null) {n.parent := root;}
      return root;
    } else if (root.data < value) {
      n := insert(root.right, value);
      root.right := n;
      if (n != null) {n.parent := root;}
      return root;
    }
    return root;
  }
}

procedure remove(root: Node, value: Int)
returns (res: Node)
  requires tree(root);
  ensures tree(res);
{
    if (root == null) {
        return null;
    } else if (root.data == value) {
        if (root.left == null && root.right == null) {
            root.parent := null;
            free(root);
            return null;
        } else if (root.left != null && root.right == null) {
            res := root.left;
            root.parent := null;
            res.parent := null;
            free(root);
            return res;
        } else if (root.left == null && root.right != null) {
            res := root.right;
            root.parent := null;
            res.parent := null;
            free(root);
            return res;
        } else {
            root.parent := null;
            var l: Node, m: Node;
            l, m := extract_max(root.left);
            m.left := l;
            if (l != null) { l.parent := m; }
            m.right := root.right;
            m.right.parent := m;
            free(root);
            return m;
        }
    } else if (root.data > value) {
        root.left := remove(root.left, value);
        if (root.left != null) {root.left.parent := root;}
        return root;
    } else {
        root.right := remove(root.right, value);
        if (root.right != null) {root.right.parent := root;}
        return root;
    }
}

procedure traverse(root: Node, implicit ghost p: Node) 
  requires ptree(root, p);
  ensures ptree(root, p);
{
  if (root != null) {
    traverse(root.left);
    traverse(root.right);
  }
}

procedure traverse2(root: Node) 
  requires tree(root);
  ensures tree(root);
{
  if (root != null) {
    traverse2(root.left);
    if (root.left != null) {root.left.parent := root;}
    traverse2(root.right);
    if (root.right != null) {root.right.parent := root;}
  }
}
