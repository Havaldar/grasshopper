struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: int;
}

predicate tree(x: Node, y: Node) {
    x == null
  ||
    x != null &*&
    x.parent |-> y &*&
    tree(x.left, x) &*&
    tree(x.right, x)
}

predicate treeAllocInvariant(X: set<Node>) {
  (forall n in X :: n.parent == n.parent)
}
procedure extract_max(root: Node, p: Node) returns (others: Node, max: Node)
  requires p in Alloc || p == null;
  requires tree(root, p) &*& root != null;
  requires treeAllocInvariant(Alloc);
  ensures  tree(others, p);
  ensures  acc(max) &*& max.left == null &*& max.right == null &*& max.parent == null;
  ensures  treeAllocInvariant(Alloc);
{
    if (root.right != null) {
        var c: Node, m: Node;
        c, m := extract_max(root.right, root); 
        root.right := c;
        return root, m;
    } else {
        var c: Node;
        c := root.left;
        root.left := null;
        root.parent := null;
        if (c != null) {
          c.parent := p;
        }
        return c, root;
    }
}

