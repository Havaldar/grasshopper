struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: Int;
}

predicate heap_cnt(x: Node, y: Node, content: Set<Int>) {
    x == null &*&
    content == Set<Int>()
  ||
    x != null &*&
    x.parent |-> y &*&
    x.data in content &*&
    heap_cnt(x.left, x, content) &*& //TODO content
    heap_cnt(x.right, x, content) &*& //TODO content
    (x.left == null || (x.left != null && x.left.data <= x.data)) &*&
    (x.right == null || (x.right != null && x.right.data <= x.data)) 
}

predicate treeAllocInvariant(X: Set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure union(h1: Node, h2: Node,
                implicit ghost content1: Set<Int>,
                implicit ghost content2: Set<Int>)
    returns (res: Node)
    requires heap_cnt(h1, null, content1) &*& heap_cnt(h2, null, content2);
    requires treeAllocInvariant(Alloc);
    ensures treeAllocInvariant(Alloc);
    ensures heap_cnt(res, null, content1 ++ content2);


procedure insert(h: Node, value: Int,
                 implicit ghost content: Set<Int>)
returns (res: Node)
    requires heap_cnt(h, null, content);
    requires treeAllocInvariant(Alloc);
    ensures treeAllocInvariant(Alloc);
    ensures heap_cnt(res, null, content ++ Set(value));
{
    var n: Node;
    n := new Node;
    n.left := null;
    n.right := null;
    n.parent := null;
    n.data := value;
    return union(h, n);
}
