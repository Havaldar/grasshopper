struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: int;
}

predicate heap_cnt(x: Node, y: Node, content: set<int>) {
    x == null &*&
    content == set<int>()
  ||
    x != null &*&
    x.parent |-> y &*&
    x.data in content &*&
    heap_cnt(x.left, x, content) &*& //TODO content
    heap_cnt(x.right, x, content) &*& //TODO content
    (x.left == null || (x.left != null && x.left.data <= x.data)) &*&
    (x.right == null || (x.right != null && x.right.data <= x.data)) 
}

predicate treeAllocInvariant(X: set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure union(h1: Node, h2: Node,
                implicit ghost content1: set<int>,
                implicit ghost content2: set<int>)
    returns (res: Node, ghost res_content: set<int>)
    requires heap_cnt(h1, null, content1) &*& heap_cnt(h2, null, content2);
    requires treeAllocInvariant(Alloc);
    ensures treeAllocInvariant(Alloc);
    ensures res_content == content1 ++ content2;
    ensures heap_cnt(res, null, res_content);


procedure extractMax(h: Node,
                     implicit ghost content: set<int>)
returns (max: int, rest: Node, ghost remaining: set<int>)
    requires heap_cnt(h, null, content) &*& h != null;
    requires treeAllocInvariant(Alloc);
    ensures  treeAllocInvariant(Alloc);
    ensures  heap_cnt(rest, null, remaining);
    ensures  content == set(max) ++ remaining;
{
    var d : int;
    d := h.data;
    var hp: Node, r: Node, l: Node;
    l := h.left;
    r := h.right;
    h.left := null;
    h.right := null;
    if (l != null) { l.parent := null; }
    if (r != null) { r.parent := null; }
    var rem: set<int>;
    hp, rem := union(l, r);
    free h;
    return d, hp, rem;
}
