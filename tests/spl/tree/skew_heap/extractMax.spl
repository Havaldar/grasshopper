include "../../include/bstree.spl";

procedure union(h1: Node, h2: Node,
                implicit ghost content1: Set<Int>,
                implicit ghost content2: Set<Int>)
    returns (res: Node)
    requires heap_set(h1, content1) &*& heap_set(h2, content2);
    ensures heap_set(res, content1 ++ content2);


procedure extractMax(h: Node,
                     implicit ghost content: Set<Int>)
returns (max: Int, rest: Node)
    requires heap_set(h, content) &*& h != null &*& h.parent == null
    ensures  exists remaining: Set<Int> :: heap_set(rest, remaining) &*& content == Set(max) ++ remaining
    ensures  forall x in content :: max >= x
{
    var d : Int;
    d := h.data;
    var hp: Node, r: Node, l: Node;
    l := h.left;
    r := h.right;
    h.left := null;
    h.right := null;
    if (l != null) { l.parent := null; }
    if (r != null) { r.parent := null; }
    hp := union(l, r);
    free h;
    return d, hp;
}
