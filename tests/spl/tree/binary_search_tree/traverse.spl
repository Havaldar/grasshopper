struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: Int;
}

predicate bstree_cnt(x: Node, y: Node, lb: Int, ub: Int, content: Set<Int>) {
    x == null
  ||
    x != null &*&
    x.parent |-> y &*&
    lb <= x.data &*&
    x.data <= ub &*&
    bstree_cnt(x.left, x, lb, x.data - 1, content) &*&  //TODO content
    bstree_cnt(x.right, x, x.data + 1, ub, content)     //TODO content
}

predicate treeAllocInvariant(X: Set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure traverse(root: Node, p: Node,
                   ghost lb: Int, ghost ub: Int,
                   implicit ghost content: Set<Int>)
  requires bstree_cnt(root, p, lb, ub, content);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  bstree_cnt(root, p, lb, ub, content);
{
  if (root != null) {
    traverse(root.left, root, lb, root.data - 1);
    traverse(root.right, root, root.data + 1, ub);
  }
}
