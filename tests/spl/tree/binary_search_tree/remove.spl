struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: int;
}

predicate bstree_cnt(x: Node, y: Node, lb: int, ub: int, content: set<int>) {
    x == null
  ||
    x != null &*&
    x.parent |-> y &*&
    lb <= x.data &*&
    x.data <= ub &*&
    bstree_cnt(x.left, x, lb, x.data - 1, content) &*&  //TODO content
    bstree_cnt(x.right, x, x.data + 1, ub, content)     //TODO content
}

predicate treeAllocInvariant(X: set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure extract_max(root: Node, ghost p: Node,
                      ghost lb: int, ghost ub: int,
                      implicit ghost content: set<int>)
returns (others: Node, max: Node)
  requires p in Alloc || p == null;
  requires bstree_cnt(root, p, lb, ub, content) &*& root != null;
  requires treeAllocInvariant(Alloc);
  ensures  bstree_cnt(others, p, lb, max.data-1, content -- set(max.data)) &*& acc(max);
  ensures  max.left == null && max.right == null && max.parent == null && max.data <= ub && lb <= max.data;
  ensures  treeAllocInvariant(Alloc);


procedure remove(root: Node, value: int, p: Node,
                 ghost lb: int, ghost ub: int,
                 implicit ghost content: set<int>)
returns (res: Node)
  requires bstree_cnt(root, p, lb, ub, content);
  requires treeAllocInvariant(Alloc);
  ensures bstree_cnt(res, p, lb, ub, content -- set(value));
  ensures treeAllocInvariant(Alloc);
{
    if (root == null) {
        return null;
    } else if (root.data == value) {
        if (root.left == null && root.right == null) {
            root.parent := null;
            free(root);
            return null;
        } else if (root.left != null && root.right == null) {
            res := root.left;
            root.parent := null;
            free(root);
            res.parent := p;
            return res;
        } else if (root.left == null && root.right != null) {
            res := root.right;
            root.parent := null;
            free(root);
            res.parent := p;
            return res;
        } else {
            var l: Node, m: Node;
            l, m := extract_max(root.left, root, lb, value - 1);
            m.left := l;
            if (l != null) {       
              l.parent := m;
            }
            m.right := root.right;
            m.right.parent := m;
            root.parent := null;
            free(root);
            m.parent := p;
            return m;
        }
    } else if (root.data > value) {
        root.left := remove(root.left, value, root, lb, root.data - 1);
        return root;
    } else {
        root.right := remove(root.right, value, root, root.data + 1, ub);
        return root;
    }
}
