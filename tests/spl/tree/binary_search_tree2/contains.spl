struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: int;
}

predicate stree(x: Node, y: Node, content: set<int>) {
    x == null &*&
    content == set<int>()
  ||
    x != null &*&
    x.parent |-> y &*&
    x.data in content &*&
    stree(x.left, x, content) &*&  //TODO content
    stree(x.right, x, content)     //TODO content
}

predicate treeAllocInvariant(X: set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure contains(root: Node, val: int, p: Node,
                   implicit ghost content: set<int>)
  returns (res: bool)
  requires stree(root, p, content);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  stree(root, p, content);
  ensures  res == val in content;
{
  if (root == null) {
    return false;
  } else { 
    if (val == root.data) {
      return true;
    } else if (val < root.data) {
      return contains(root.left, val, root);
    } else {
      return contains(root.right, val, root);
    }
  }
}
