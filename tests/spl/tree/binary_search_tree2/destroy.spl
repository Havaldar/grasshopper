struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: int;
}

predicate stree(x: Node, y: Node, content: set<int>) {
    x == null &*&
    content == set<int>()
  ||
    x != null &*&
    x.parent |-> y &*&
    x.data in content &*&
    stree(x.left, x, content) &*&  //TODO content
    stree(x.right, x, content)     //TODO content
}

predicate treeAllocInvariant(X: set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure destroy(root: Node, p: Node,
                  implicit ghost content: set<int>)
  requires stree(root, p, content);
  requires treeAllocInvariant(Alloc);
  ensures treeAllocInvariant(Alloc);
{
    if (root != null) {
        destroy(root.left, root);
        destroy(root.right, root);
        root.parent := null;
        free root;
    }
}

