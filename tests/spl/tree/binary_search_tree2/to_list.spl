struct Node { //union between tree and list
  var next: Node;
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: Int;
}

//same as sorted_set but forces parent to be null
predicate sorted_set2(x: Node, y: Node, c: Set<Int>) {
    x == y &*&
    c == Set<Int>()
  || 
    x != y &*&
    x.parent == null &*&
    x.data == x.data &*&
    x.next == x.next &*&
    x.right == x.right &*&
    x.left == x.left
    //sorted_set_lb(x, y, x.data - 1, c) TODO
}

predicate sorted_set2_lb(x: Node, y: Node, lb: Int, c: Set<Int>) {
    x == y &*&
    c == Set<Int>()
  || 
    x != y &*&
    x.parent == null &*&
    x.data >= lb &*&
    x.next == x.next &*&
    x.right == x.right &*&
    x.left == x.left &*&
    sorted_set2_lb(x.next, y, x.data + 1, c)
}

predicate stree2(x: Node, content: Set<Int>) {
    x == null &*&
    content == Set<Int>()
  ||
    x != null &*&
    x.parent == x.parent &*&
    x.next == null &*&
    x.data in content &*&
    stree2(x.left, content) &*&  //TODO content
    stree2(x.right, content)     //TODO content
}

predicate stree2_b(x: Node, lb: Int, ub: Int, content: Set<Int>) {
    x == null &*&
    content == Set<Int>()
  ||
    x != null &*&
    x.parent == x.parent &*&
    x.next == null &*&
    x.data in content &*&
    x.data <= ub &*&
    lb <= x.data &*&
    stree2_b(x.left, lb, ub, content) &*&  //TODO content
    stree2_b(x.right, lb, ub, content)     //TODO content
}

predicate treeAllocInvariant(X: Set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure union(lst1: Node, lst2: Node,
                implicit ghost content1: Set<Int>,
                implicit ghost content2: Set<Int>)
  returns (res: Node)
  requires sorted_set2(lst1, null, content1);
  requires sorted_set2(lst2, null, content2);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures sorted_set2(res, null, content1 ++ content2);
{
    if (lst1 == null) {
        return lst2;
    } else if (lst2 == null) {
        return lst1;
    } else if (lst1.data < lst2.data) {
        lst1.next := union(lst1.next, lst2);
        return lst1;
    } else if (lst1.data > lst2.data) {
        lst2.next := union(lst1, lst2.next);
        return lst2;
    } else { //lst1.data == lst2.data
        var n: Node;
        n := lst1.next;
        free(lst1);
        return union(n, lst2);
    }
}

procedure insertL( lst: Node, val: Int,
                  implicit ghost content: Set<Int>)
  returns (res: Node)
  requires sorted_set2(lst, null, content);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures sorted_set2(res, null, content ++ Set(val));
{
  var curr: Node, prev: Node;
  curr := lst;
  prev := null;
  var c1: Set<Int>, c2: Set<Int>;
  c1 := content;
  c2 := Set<Int>();

  while (curr != null && curr.data < val)
    invariant prev == null && curr == lst && c2 == Set<Int>() || 
                (val > prev.data && 
                prev != curr && 
                prev.next == curr && 
                Btwn(next,lst,prev,curr)) &*&
                sorted_set2(lst, curr, c2);
    invariant sorted_set2(curr, null, c1);
    invariant content == c1 ++ c2;
    invariant prev == null || curr == null || prev.data < curr.data;
  {
    c1 := c1 -- Set(curr.data);
    c2 := c2 ++ Set(curr.data);
    prev := curr;
    curr := curr.next; 
  }

  var n: Node;

  if (curr != null && curr.data == val) {
    return lst;
  }

  n := new Node;
  n.next := curr;
  n.data := val;

  if (prev != null) {
    prev.next := n;
    return lst;
  } else {
    return n;
  }

}

//this goes through, but it is extremely slow
procedure toList(t: Node, implicit ghost content: Set<Int>)
returns (res: Node)
  requires stree2(t, content);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures sorted_set2(res, null, content);
{
    if (t == null) {
        return null;
    } else {
        t.parent := null;
        var l: Node, r: Node, u: Node, d: Int;
        r := t.right;
        l := t.left;
        d := t.data;
        if (r != null) { r.parent := null; }
        if (l != null) { l.parent := null; }
        free(t);
        r := toList(r);
        l := toList(l);
        u := union(l, r);
        return insertL(u, d);
    }
}

//TODO needs bound!!
procedure toListRec(t: Node, l: Node, ghost lb: Int, ghost bnd: Int,
                    implicit ghost contentT: Set<Int>, implicit ghost contentL: Set<Int>)
returns (res: Node)
  requires lb <= bnd &*& stree2_b(t, lb, bnd, contentT);
  requires sorted_set2_lb(l, null, bnd + 1, contentL) &*& treeAllocInvariant(Alloc);
  ensures  sorted_set2_lb(res, null, lb, contentT ++ contentL) &*& treeAllocInvariant(Alloc);
{
    if (t == null) {
        return l;
    } else {
        var lft: Node;
        lft := t.left;
        if (lft != null) lft.parent := null;
        if (t.right != null) t.right.parent := null;
        l := toListRec(t.right, l, t.data, bnd);
        //t.left := null;
        //t.right := null;
        t.next := l;
        return toListRec(lft, t, lb, t.data -1);
    }
}


procedure insert(root: Node, value: Int, implicit ghost content: Set<Int>)
returns (new_root: Node)
  requires stree2(root, content) &*& treeAllocInvariant(Alloc);
  ensures stree2(new_root, content ++ Set(value)) &*& treeAllocInvariant(Alloc);
{
  if (root == null) {
    var t: Node;
    t := new Node;
    t.left := null;
    t.right := null;
    t.data := value;
    t.next := null;
    return t;
  } else { 
    var n: Node;
    if (root.data > value) {
      n := insert(root.left, value);
      root.left := n;
      if (n != null) {n.parent := root;}
      return root;
    } else if (root.data < value) {
      n := insert(root.right, value);
      root.right := n;
      if (n != null) {n.parent := root;}
      return root;
    }
    return root;
  }
}

procedure toTree(t: Node, implicit ghost content: Set<Int>)
returns (res: Node)
  requires sorted_set2(t, null, content) &*& treeAllocInvariant(Alloc);
  ensures  stree2(res, content) &*& treeAllocInvariant(Alloc);
{
    if (t == null) {
        return null;
    } else {
        var n: Node, d: Int;
        n := t.next;
        d := t.data;
        free(t);
        n := toTree(n);
        return insert(n, d);
    }
}

