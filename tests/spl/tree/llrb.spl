//left leaning red-black tree:
//http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf

struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: int;
  var red: bool; //false is black
}

//RB tree invariants:
//-No path from the root to the bottom contains two consecutive red links.
//-The number of black links on every such path is the same
//additional LLRB tree invariant:
//-requiring that 3-nodes always lean to the left (and that 4-nodes are balanced)

predicate tree(x: Node, y: Node) {
    x == null
  ||
    x != null &*&
    x.parent |-> y &*&
    tree(x.left, x) &*&
    tree(x.right, x)
}

predicate rb(x: Node, y: Node) {
    x == null
  ||
    x != null &*&
    x.parent |-> y &*&
    (!(x.red) || x.left == null || !(x.left.red)) &*&                           //red node has left black child
    (!(x.red) || x.right == null || !(x.right.red)) &*&                         //red node has right black child
    tree(x.left, x) &*&
    tree(x.right, x)
}

predicate llrb(x: Node, y: Node) {
    x == null
  ||
    x != null &*&
    x.parent |-> y &*&
    (!(x.red) || x.left == null || !(x.left.red)) &*&                           //red node has left black child
    (!(x.red) || x.right == null || !(x.right.red)) &*&                         //red node has right black child
    (x.right == null || !(x.right.red) || (x.left != null && x.left.red)) &*&   //left leaning: red right child => red left child
    tree(x.left, x) &*&
    tree(x.right, x)
}

predicate llrb23(x: Node, y: Node) {
    x == null
  ||
    x != null &*&
    x.parent |-> y &*&
    (!(x.red) || x.left == null || !(x.left.red)) &*&                           //red node has left black child
    (!(x.red) || x.right == null || !(x.right.red)) &*&                         //red node has right black child
    (x.right == null || !(x.right.red)) &*&                                     //left leaning 2-3 nodes
    tree(x.left, x) &*&
    tree(x.right, x)
}

predicate treeAllocInvariant(X: set<Node>) {
  (forall n in X :: n.parent == n.parent)
}


procedure colorFlip(h: Node, ghost p: Node,
                    implicit ghost l: bool,
                    implicit ghost c: bool,
                    implicit ghost r: bool)
  requires h != null && h.left != null && h.right != null &&
           h.red == c && h.left.red == l && h.right.red == r;
  requires h.parent |-> p &*& llrb(h.left, h) &*& llrb(h.right, h);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  tree(h, p);
  requires h != null && h.left != null && h.right != null &&
           h.red != c && h.left.red != l && h.right.red != r;
{
    if (h.red) h.red := false; else h.red := true;
    if (h.left.red) h.left.red := false; else h.left.red := true;
    if (h.right.red) h.right.red := false; else h.right.red := true;
}

procedure delete(root: Node, key: int) returns (res: Node)
  requires llrb(root, null);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  llrb(res, null) &*& (res == null || !(res.red));
{
    if (root != null) {
        root := delete1(root, key, null);
        if (root != null) { //BUG, this check was added
            root.red := false;
        }
    }
    return root;
}

//rb-tree principle: only red nodes are rotated
//additional properties: 2 blacks on the left => red ?

//it seems that delete is assuming the node is in the tree
procedure delete1(h: Node, key: int, ghost p: Node) returns (res: Node)
  requires h != null;
  requires llrb(h, p);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  llrb(res, p);
{
    if (key < h.data) {
        if (!isRed(h.left, h) && h.left != null) { //BUG,check added: "new(); add(x); delete(x);" throw a null pointer exn
            if (!isRed(h.left.left, h.left)) {
                //does the two tests implies that h is red ?
                h := moveRedLeft(h, p);
            }
        }
        h.left := delete1(h.left, key, h);
    } else {
        if (isRed(h.left, h)) {
            h := rotateRight(h, p);
        }
        if (key == h.data && h.right == null) {
            h.parent := null;
            free(h);
            return null; //TODO what about the left ??
        }

        if (!isRed(h.right, h)) {
            if (!isRed(h.right.left, h.right)) {
                h := moveRedRight(h, p);//assume h to be red ?
            }
        }

        if (key == h.data) {
            h.data := min(h.right, h); //why memory safe ?
            h.right := deleteMin(h.right, h);
        } else {
            h.right := delete1(h.right, key, h);
        }
    }
    return fixUp(h, p);
}

//!?!? that might actually be the method which is wrong
//works only on 2-3 trees ?!?
//h needs to be black or red ??
procedure deleteMin(h: Node, ghost p: Node) returns (res: Node)
  requires llrb(h, p);
  requires h != null; 
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  llrb(res, p);
{
    if (h.left == null) {
        h.parent := null;
        free(h);
        return null;
    }
    if (!isRed(h.left, h) && !isRed(h.left.left, h.left)) {
        h := moveRedLeft(h, p);//assume h to be red ?!
    }
    h.left := deleteMin(h.left, h);
    return fixUp(h, p);
}

//TODO some other invariant about the coloring
procedure fixUp(h: Node, ghost p: Node) returns (res: Node)
  requires h.parent |-> p &*& llrb(h.left, h) &*& llrb(h.right, h);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  llrb(res, p);
{
    if (isRed(h.right, h)) {
        h := rotateLeft(h, p);
    }
    //if (h.left != null && isRed(h.left, h)) {  //TODO that left â‰  null is redundant
    if (isRed(h.left, h)) {
        if (isRed(h.left.left, h.left)) {
            h := rotateRight(h, p);
        }
    }
    if (isRed(h.left, h) && isRed(h.right, h)) {
        colorFlip(h, p);//4-node, push it up
    }
    return h;
}

procedure insert(root: Node, key: int) returns (res: Node)
  requires llrb(root, null);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  llrb(res, null) &*& res != null &*& !(res.red);
{
    root := insert1(root, key, null);
    root.red := false;
    return root;
}

procedure insert1(h: Node, key: int, ghost p: Node) returns (res: Node)
  requires llrb(h, p);
  requires p == null || p in Alloc;
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  llrb(res, p);
  ensures  res != null;
{
    if (h == null) {
        var res: Node;
        res := new Node;
        res.left := null;
        res.right := null;
        res.parent := p;
        res.data := key;
        res.red := true;
        return res;
    } else {
        if (isRed(h.left, h) && isRed(h.right, h)) {
            colorFlip(h, p); //4-nodes, push it up
        }
        //either a 3 node or a 2 node
        if (key == h.data) {
            //already in the set
        } else if (key < h.data) {
            h.left := insert1(h.left, key, h);
        } else {
            h.right := insert1(h.right, key, h);
        }
        //what do we know about the colors ?
        //a llrb on the left and on the right ? relation between left, right and h ?
        //...

        if (isRed(h.right, h) && !isRed(h.left, h)) { //right leaning 3-nodes
            h := rotateLeft(h, p); //after the call, left leaning 3-nodes
        }
        if (isRed(h.left, h) && isRed(h.left.left, h.left)) { //2 red nodes on the left
            h := rotateRight(h, p);
        }
        return h;
    }
}

procedure isRed(h: Node, ghost p: Node) returns (res: bool)
  requires tree(h, p); //TODO something stronger ?
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  tree(h, p); //TODO something stronger ?
  ensures  res == ((h != null) && h.red);
{
    if (h != null) {
        return h.red;
    } else {
        return false;
    }
}

//TODO this is buggy for the moment
procedure isRed1(h: Node, ghost p: Node, implicit ghost c: bool) returns (res: bool)
  requires tree(h, p);
  requires c == ((h != null) && h.red);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  tree(h, p);
  ensures  res == ((h != null) && h.red);
  ensures  res == c;
{
    if (h != null) {
        return h.red;
    } else {
        return false;
    }
}

procedure min(h: Node, ghost p: Node) returns (res: int)
  requires tree(h, p); //TODO stronger (cst field optimization saves us)
  requires h != null;
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  tree(h, p); //TODO stronger (cst field optimization saves us)
{
     if (h.left != null) {
         return min(h.left, h);
     } else {
         return h.data;
     }
}

// Assuming that h is red and both h.left and h.left.left are black,
// make h.left or one of its children red.
procedure moveRedLeft(h: Node, ghost p: Node) returns (res: Node)
  requires h != null && h.red && h.left != null && !(h.left.red) && (h.left.left == null || !(h.left.left.red));
  requires llrb(h, p);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  llrb(res, p);
  ensures  res.left != null && res.right != null;
{
    colorFlip(h, p);//make it a 4 node
    if (isRed(h.right.left, h.right)) {
        h.right := rotateRight(h.right, h);
        h := rotateLeft(h, p);
        colorFlip(h, p);
    }
    return h;
}

// Assuming that h is red and both h.right and h.right.left are black, (DZ implies that left is black)
// make h.right or one of its children red.  (DZ returns a black 4-node or a red 2-node)
procedure moveRedRight(h: Node, ghost p: Node) returns (res: Node)
  requires h != null && h.red && h.right != null && !(h.right.red) && (h.right.left != null || !(h.right.left.red));
  requires llrb(h, p);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  llrb(res, p);
{
    colorFlip(h, p);
    if (isRed(h.left.left, h.left))
    {
        h := rotateRight(h, p);
        colorFlip(h, p);
    }
    return h;
}

// Make a right-leaning 3-node lean to the left.
// in case of a 4-node, returns two red nodes in a row on the left side
// what about the coloring -> h.red + h.left.red + h.right.red < 3
procedure rotateLeft(h: Node, ghost p: Node, implicit ghost c: bool) returns (res: Node)
  requires h.parent |-> p &*& llrb(h.left, h) &*& llrb(h.right, h);
  requires h.right != null && h.right.red && c == h.red;
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  llrb(res, p); //TODO not quite a llrb
  ensures  res.left != null && res.left.red && c == res.red;
{
    var x: Node;
    x := h.right;
    h.right := x.left;
    if (h.right != null) h.right.parent := h;
    x.left := h;
    if (x.left != null) x.left.parent := x;
    x.red := h.red;
    h.red := true;
    x.parent := p;
    return x;
}

// Make a left-leaning 3-node lean to the right.
// or there are two left node on the left -> balanced 4 node
procedure rotateRight(h: Node, ghost p: Node, implicit ghost c: bool) returns (res: Node)
  requires h != null && h.left != null && h.left.red && c == h.red;
  requires h.parent |-> p &*& llrb(h.left, h) &*& llrb(h.right, h);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  res.parent |-> p &*& llrb(res.left, res) &*& llrb(res.right, res);
  //ensures  llrb(res, p);
  ensures  res.right != null && res.right.red && c == res.red;
{
    var x: Node;
    x := h.left;
    h.left := x.right;
    if (h.left != null) h.left.parent := h;
    x.right := h;
    if (x.right != null) x.right.parent := x;
    x.red := h.red;
    h.red := true;
    x.parent := p;
    return x;
}

//balancing a 4-node
procedure rotateRight1(h: Node, ghost p: Node) returns (res: Node)
  requires  h != null && h.parent == p && h.left.parent == h && !(h.red) &&
            h.left != null && h.left.red &&
            h.left.left != null && h.left.left.red &&
            (h.right == null || !(h.right.red)) &&
            (h.left.right == null || !(h.left.right.red));
  requires acc(h) &*& acc(h.left) &*& llrb(h.left.left, h.left) &*& llrb(h.left.right, h.left) &*& llrb(h.right, h);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  llrb(res, p);
  ensures  res.right != null && res.right.red && res.left != null && res.left.red;
{
    var x: Node;
    x := h.left;
    h.left := x.right;
    if (h.left != null) h.left.parent := h;
    x.right := h;
    if (x.right != null) x.right.parent := x;
    x.red := h.red;
    h.red := true;
    x.parent := p;
    return x;
}
