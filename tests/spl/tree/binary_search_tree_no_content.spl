include "../include/bstree.spl";

procedure destroy(root: Node,
                  ghost lb: Int, ghost ub: Int)
  requires bstree_bounded(root, lb, ub)
  ensures emp
{
    if (root != null) {
        destroy(root.left, lb, ub);
        destroy(root.right, lb, ub);
        root.parent := null;
        free root;
    }
}

procedure extract_max(root: Node, ghost lb: Int, ghost ub: Int)
  returns (others: Node, max: Node)
  requires bstree_bounded(root, lb, ub) &*& root != null
  ensures  bstree_bounded(others, lb, max.data-1) &*& acc(max)
  ensures  max.right == null && max.parent == null && max.data <= ub && lb <= max.data
{
    if (root.right != null) {
        var c: Node, m: Node;
        c, m := extract_max(root.right, root.data + 1, ub); 
        root.right := c;
        if (c != null) {c.parent := root;}
        return root, m;
    } else {
        var c: Node;
        c := root.left;
        root.parent := null;
        return c, root;
    }
}

procedure insert(root: Node, value: Int,
                 ghost lb: Int, ghost ub: Int)
  returns (new_root: Node)
  requires bstree_bounded(root, lb, ub)
  requires lb <= value && value <= ub
  ensures bstree_bounded(new_root, lb, ub)
{
  if (root == null) {
    var t: Node;
    t := new Node;
    t.left := null;
    t.right := null;
    t.data := value;
    return t;
  } else { 
    var n: Node;
    if (root.data > value) {
      n := insert(root.left, value, lb, root.data-1);
      root.left := n;
      if (n != null) {n.parent := root;}
      return root;
    } else if (root.data < value) {
      n := insert(root.right, value, root.data+1, ub);
      root.right := n;
      if (n != null) {n.parent := root;}
      return root;
    }
    return root;
  }
}

procedure remove(root: Node, value: Int,
                 ghost lb: Int, ghost ub: Int)
returns (res: Node)
  requires bstree_bounded(root, lb, ub)
  ensures bstree_bounded(res, lb, ub)
{
    if (root == null) {
        return null;
    } else if (root.data == value) {
        if (root.left == null && root.right == null) {
            root.parent := null;
            free(root);
            return null;
        } else if (root.left != null && root.right == null) {
            res := root.left;
            root.parent := null;
            res.parent := null;
            free(root);
            return res;
        } else if (root.left == null && root.right != null) {
            res := root.right;
            root.parent := null;
            res.parent := null;
            free(root);
            return res;
        } else {
            root.parent := null;
            var l: Node, m: Node;
            l, m := extract_max(root.left, lb, value - 1);
            m.left := l;
            if (l != null) { l.parent := m; }
            m.right := root.right;
            m.right.parent := m;
            free(root);
            return m;
        }
    } else if (root.data > value) {
        root.left := remove(root.left, value, lb, root.data - 1);
        if (root.left != null) {root.left.parent := root;}
        return root;
    } else {
        root.right := remove(root.right, value, root.data + 1, ub);
        if (root.right != null) {root.right.parent := root;}
        return root;
    }
}

procedure traverse(root: Node, ghost lb: Int, ghost ub: Int) 
  requires bstree_bounded(root, lb, ub)
  ensures  bstree_bounded(root, lb, ub)
{
    if (root != null) {
        traverse(root.left, lb, root.data - 1);
        if (root.left != null) {root.left.parent := root;}
        traverse(root.right, root.data + 1, ub);
        if (root.right != null) {root.right.parent := root;}
    }
}
