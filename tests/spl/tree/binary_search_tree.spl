struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: int;
}

predicate stree(x: Node, content: set<int>) {
    x == null &*&
    content == set<int>()
  ||
    x != null &*&
    x.data in content &*&
    x.parent == x.parent &*&
    x.left == x.left &*&
    x.right == x.right &*&
    stree(x.left, content) &*&  //TODO content
    stree(x.right, content)     //TODO content
}

predicate treeAllocInvariant(X: set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure contains(root: Node, val: int, implicit ghost content: set<int>)
  returns (res: bool)
  requires stree(root, content) &*& treeAllocInvariant(Alloc);
  ensures  stree(root, content) &*& treeAllocInvariant(Alloc);
  ensures  res == val in content;
{
    if (root == null) {
        return false;
    } else { 
        if (val == root.data) {
            return true;
        } else if (val < root.data) {
            res := contains(root.left, val);
            if (root.left != null) {root.left.parent := root;}
            return res;
        } else {
            res := contains(root.right, val);
            if (root.right != null) {root.right.parent := root;}
            return res;
        }
    }
}

procedure destroy(root: Node, implicit ghost content: set<int>)
  requires stree(root, content) &*& treeAllocInvariant(Alloc);
  ensures treeAllocInvariant(Alloc);
{
    if (root != null) {
        destroy(root.left);
        destroy(root.right);
        root.parent := null;
        free root;
    }
}

procedure traverse(root: Node, implicit ghost content: set<int>)
  requires stree(root, content) &*& treeAllocInvariant(Alloc);
  ensures  stree(root, content) &*& treeAllocInvariant(Alloc);
{
    if (root != null) {
        traverse(root.left);
        if (root.left != null) {root.left.parent := root;}
        traverse(root.right);
        if (root.right != null) {root.right.parent := root;}
    }
}

procedure extract_max(root: Node, implicit ghost content: set<int>)
returns (others: Node, max: Node)
  requires stree(root, content) &*& root != null &*& treeAllocInvariant(Alloc);
  ensures  stree(others, content -- set(max.data)) &*& acc(max);
  ensures  max.right == null && max.parent == null && max.data in content;
  ensures  (forall z in (content -- set(max.data)) :: z < max.data);
  ensures  treeAllocInvariant(Alloc);
{
    if (root.right != null) {
        var c: Node, m: Node;
        c, m := extract_max(root.right); 
        root.right := c;
        if (c != null) {c.parent := root;}
        return root, m;
    } else {
        var c: Node;
        c := root.left;
        root.parent := null;
        return c, root;
    }
}

procedure insert(root: Node, value: int, implicit ghost content: set<int>)
returns (new_root: Node)
  requires stree(root, content) &*& treeAllocInvariant(Alloc);
  ensures  stree(new_root, content ++ set(value)) &*& treeAllocInvariant(Alloc);
{
  if (root == null) {
    var t: Node;
    t := new Node;
    t.left := null;
    t.right := null;
    t.data := value;
    return t;
  } else { 
    var n: Node;
    if (root.data > value) {
      n := insert(root.left, value);
      root.left := n;
      if (n != null) {n.parent := root;}
      return root;
    } else if (root.data < value) {
      n := insert(root.right, value);
      root.right := n;
      if (n != null) {n.parent := root;}
      return root;
    }
    return root;
  }
}

procedure remove(root: Node, value: int, implicit ghost content: set<int>)
returns (res: Node)
  requires stree(root, content) &*& treeAllocInvariant(Alloc);
  ensures stree(res, content -- set(value)) &*& treeAllocInvariant(Alloc);
{
    if (root == null) {
        return null;
    } else if (root.data == value) {
        if (root.left == null && root.right == null) {
            root.parent := null;
            free(root);
            return null;
        } else if (root.left != null && root.right == null) {
            res := root.left;
            root.parent := null;
            res.parent := null;
            free(root);
            return res;
        } else if (root.left == null && root.right != null) {
            res := root.right;
            root.parent := null;
            res.parent := null;
            free(root);
            return res;
        } else {
            root.parent := null;
            var l: Node, m: Node;
            l, m := extract_max(root.left);
            m.left := l;
            if (l != null) { l.parent := m; }
            m.right := root.right;
            m.right.parent := m;
            free(root);
            return m;
        }
    } else if (root.data > value) {
        root.left := remove(root.left, value);
        if (root.left != null) {root.left.parent := root;}
        return root;
    } else {
        root.right := remove(root.right, value);
        if (root.right != null) {root.right.parent := root;}
        return root;
    }
}

procedure rotate_left(h: Node, implicit ghost content: set<int>) returns (res: Node)
  requires stree(h, content) &*& treeAllocInvariant(Alloc);
  requires h != null && h.right != null;
  ensures  stree(res, content) &*& treeAllocInvariant(Alloc);
{
    var x: Node;
    x := h.right;
    h.right := x.left;
    if (h.right != null) h.right.parent := h;
    x.left := h;
    if (x.left != null) x.left.parent := x;
    x.parent := null;
    return x;
}

procedure rotate_right(h: Node, implicit ghost content: set<int>) returns (res: Node)
  requires stree(h, content) &*& treeAllocInvariant(Alloc);
  requires h != null && h.left != null;
  ensures  stree(res, content) &*& treeAllocInvariant(Alloc);
{
    var x: Node;
    x := h.left;
    h.left := x.right;
    if (h.left != null) h.left.parent := h;
    x.right := h;
    if (x.right != null) x.right.parent := x;
    x.parent := null;
    return x;
}
