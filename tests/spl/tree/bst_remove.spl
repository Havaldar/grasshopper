struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: int;
}

predicate tree(x: Node, y: Node) {
    x == null
  ||
    x != null &*&
    x.parent |-> y &*&
    tree(x.left, x) &*&
    tree(x.right, x)
}

procedure extract_max(root: Node, p: Node) returns (others: Node, max: Node)
  requires tree(root, p) &*& root != null;
  ensures  tree(others, p) &*& acc(max);
{
    if (root.right != null) {
        var c: Node, m: Node;
        c, m := extract_max(root.right, root); 
        root.right := c;
        if (c != null) {
          //c.parent := root;
        }
        return root, m;
    } else {
        return root.left, root;
    }
}

procedure remove(root: Node, value: int, p: Node) returns (res: Node)
  requires tree(root, p);
  ensures tree(res, p);
{
    if (root == null) {
        return null;
    } else if (root.data == value) {
        if (root.left == null && root.right == null) {
            free(root);
            return null;
        } else if (root.left != null && root.right == null) {
            res := root.left;
            free(root);
            return res;
        } else if (root.left == null && root.right != null) {
            res := root.right;
            free(root);
            return res;
        } else {
            var l: Node, m: Node;
            l, m := extract_max(root.left, root);
            m.left := l;
            if (l != null) {       
              l.parent := m;
            }
            m.right := root.right;
            if (root.right != null) {
              root.right.parent := m;
            }
            free(root);
            return m;
        }
    } else if (root.data > value) {
        root.left := remove(root.left, value, root);
        if (root.left != null) {
          root.left.parent := root;
        }
        return root;
    } else {
        root.right := remove(root.right, value, root);
        if (root.right != null) {
          root.right.parent := root;
        }
        return root;
    }
}
