struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: int;
}

predicate bstree(x: Node, y: Node, lb: int, ub: int) {
    x == null
  ||
    x != null &*&
    x.parent |-> y &*&
    lb <= x.data &*&
    x.data <= ub &*&
    bstree(x.left, x, lb, x.data) &*&
    bstree(x.right, x, x.data, ub)
}

predicate treeAllocInvariant(X: set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure traverse(root: Node, p: Node, ghost lb: int, ghost ub: int) 
  requires bstree(root, p, lb, ub);
  requires treeAllocInvariant(Alloc);
  ensures  treeAllocInvariant(Alloc);
  ensures  bstree(root, p, lb, ub);
{
  if (root != null) {
    traverse(root.left, root, lb, root.data - 1);
    traverse(root.right, root, root.data + 1, ub);
  }
}
