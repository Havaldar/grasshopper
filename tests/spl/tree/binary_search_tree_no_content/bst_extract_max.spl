struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: int;
}

predicate bstree(x: Node, y: Node, lb: int, ub: int) {
    x == null
  ||
    x != null &*&
    x.parent |-> y &*&
    lb <= x.data &*&
    x.data <= ub &*&
    bstree(x.left, x, lb, x.data - 1) &*&
    bstree(x.right, x, x.data + 1, ub)
}

predicate treeAllocInvariant(X: set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure extract_max(root: Node, ghost p: Node,
                      ghost lb: int, ghost ub: int)
returns (others: Node, max: Node)
  requires p in Alloc || p == null;
  requires bstree(root, p, lb, ub) &*& root != null;
  requires treeAllocInvariant(Alloc);
  ensures  bstree(others, p, lb, max.data-1) &*& acc(max);
  ensures  max.left == null && max.right == null && max.parent == null && max.data <= ub && lb <= max.data;
  ensures  treeAllocInvariant(Alloc);
{
    if (root.right != null) {
        var c: Node, m: Node;
        c, m := extract_max(root.right, root, root.data + 1, ub); 
        root.right := c;
        return root, m;
    } else {
        var c: Node;
        c := root.left;
        root.left := null;
        root.parent := null;
        if (c != null) {
          c.parent := p;
        }
        return c, root;
    }
}

