struct Node {
  var left: Node;
  var right: Node;
  var parent: Node;
  var data: Int;
}

predicate tree(x: Node) {
  x == null
  ||
  x.parent |-> x.parent &*&
  tree(x.left) &*&
  tree(x.right)
}

predicate treeAllocInvariant(X: Set<Node>) {
  (forall n in X :: n.parent == n.parent)
}

procedure contains(root: Node, val: Int)
  returns (res: Bool)
  requires tree(root);
  ensures tree(root);
{
  var curr: Node;
  curr := root;

  while (curr != null && curr.data != val) 
    invariant tree(curr) -** tree(root);
  {
    if (curr.data > val) {
      curr := curr.left;
    } else if (curr.data < val) {
      curr := curr.right;
    }
  }

  if (curr != null) return true;
  else return false;
}

procedure singleton(val: Int)
  returns (root: Node)
  requires emp;
  ensures (acc(root) -** tree(root)) &*& root.parent == null ;
{
  root := new Node;
  root.left := null;
  root.right := null;
  root.parent := null;
  root.data := val;
}

procedure insert(root: Node, val: Int)
  returns (nroot: Node)
  requires tree(root);
  ensures tree(nroot);
{
  if (root == null) {
    nroot := singleton(val);
    return nroot;
  }

  var curr: Node;
  curr := root;

  while (curr.data > val && curr.left != null ||
         curr.data < val && curr.right != null) 
    invariant acc(curr) -** tree(curr) -** tree(root);
  {
    if (curr.data > val && curr.left != null) {
      curr := curr.left;
    } else if (curr.data < val && curr.right != null) {
      curr := curr.right;
    }
  }

  if (curr.data == val) {
    return root;
  } else {
    var n: Node;
    n := singleton(val);
    n.parent := curr;
    if (curr.data > val) {
      curr.left := n;
    } else {
      curr.right := n;
    }
    return root;
  }
}

procedure test(root: Node)
  returns (n: Node)
  requires tree(root);
  ensures tree(root) &*& tree(n);
{
  n := singleton(1);
}

procedure remove(root: Node, val: Int) returns (new_root: Node)
  requires tree(root);
  ensures tree(new_root);
{
  var curr: Node;
  curr := root;

  while (curr != null && curr.data != val) 
    invariant tree(curr) -** tree(root);
  {
    if (curr.data > val) {
      curr := curr.left;
    } else if (curr.data < val) {
      curr := curr.right;
    }
  }

  if (curr == null) {
    return root;
  } else  {
    var cp: Node, cl: Node, cr: Node;
    cp, cl, cr := curr.parent, curr.left, curr.right;

    if (cl != null && cr != null) {
      var lm: Node, lmp: Node;
      lmp := cl;
      lm := cl;            

      while (lm.right != null) 
        invariant tree(lm) -** tree(lmp) -** tree(cl) -** tree(root);
        invariant lm != null && (cl == lm || lmp.right == lm);
      {
        lmp := lm;
        lm := lm.right;
      }

      if (cl != lm) {
        var lml: Node;
        lml := lm.left;
        lmp.right := lml;
        if (lml != null) lml.parent := lmp;
        lm.left := cl;
        cl.parent := lm;      
      }
      lm.parent := cp;
      lm.right := cr;
      cr.parent := lm;

      curr.parent := null;
      free curr;

      if (curr == root) {
        return lm;
      } else {
        if (cp.left == curr) {
          cp.left := lm;
          return root;
        } else {
          cp.right := lm;
          return root;
        }
      }
    } else {
      curr.parent := null;
      free curr;
      var nc: Node;
      if (cl != null) {
        nc := cl;
      } else {
        nc := cr;
      }
      if (nc != null) nc.parent := cp;
      if (curr == root) {
        return nc;
      } else {
        if (cp.left == curr) {
          cp.left := nc;
        } else {
          cp.right := nc;
        }
        return root;
      }
    }
  }
}

procedure remove_alt(root: Node, val: Int) returns (new_root: Node)
  requires tree(root);
  ensures tree(new_root);
{
  var curr: Node;
  curr := root;
  new_root := root;

  while (curr != null && curr.data != val) 
    invariant tree(root);
    invariant root == null || curr == null || Btwn(parent, curr, root, root);
    invariant root != null || curr == null;
  {
    if (curr.data > val) {
      curr := curr.left;
    } else if (curr.data < val) {
      curr := curr.right;
    }
  }

  if (curr == null) return root;

  var cp: Node, cl: Node, cr: Node;
  cp, cl, cr := curr.parent, curr.left, curr.right;

  if (cl != null && cr != null) {
    var lm: Node, lmp: Node;
    lmp := cl;
    lm := cl;            

    while (lm.right != null) 
      invariant tree(root);
      invariant Btwn(parent, lm, cl, root) && Btwn(parent, lm, lmp, cl);
      invariant lm != null && (cl == lm || lmp.right == lm);
    {
      lmp := lm;
      lm := lm.right;
    }

    if (cl != lm) {
      var lml: Node;
      lml := lm.left;
      lmp.right := lml;
      if (lml != null) lml.parent := lmp;
      lm.left := cl;
      cl.parent := lm;      
    }
    lm.parent := cp;
    lm.right := cr;
    cr.parent := lm;

    curr.parent := null;
    free curr;

    if (curr == root) {
      return lm;
    } else {
      if (cp.left == curr) {
        cp.left := lm;
      } else {
        cp.right := lm;
      }
      return root;
    }
  } else {
    curr.parent := null;
    free curr;
    var nc: Node;
    if (cl != null) {
      nc := cl;
    } else {
      nc := cr;
    }
    if (nc != null) nc.parent := cp;
    if (curr == root) {
      return nc;  
    } else {
      if (cp.left == curr) {
        cp.left := nc;
      } else {
        cp.right := nc;
      }
      return root;
    }
  }
}
