include "../include/bstree.spl";

procedure contains(root: Node, val: Int)
  returns (res: Bool)
  requires tree(root)
  ensures tree(root)
{
  var curr: Node;
  curr := root;

  while (curr != null && curr.data != val) 
    invariant tree(curr) -** tree(root)
  {
    if (curr.data > val) {
      curr := curr.left;
    } else if (curr.data < val) {
      curr := curr.right;
    }
  }

  if (curr != null) return true;
  else return false;
}

procedure singleton(val: Int)
  returns (root: Node)
  requires emp
  ensures (acc(root) -** tree(root)) &*& root.parent == null
{
  root := new Node;
  root.left := null;
  root.right := null;
  root.parent := null;
  root.data := val;
}

procedure insert(root: Node, val: Int)
  returns (nroot: Node)
  requires tree(root)
  ensures tree(nroot)
{
  if (root == null) {
    nroot := singleton(val);
    return nroot;
  }

  var curr: Node;
  curr := root;

  while (curr.data > val && curr.left != null ||
         curr.data < val && curr.right != null) 
    invariant acc(curr) -** tree(curr) -** tree(root)
  {
    if (curr.data > val && curr.left != null) {
      curr := curr.left;
    } else if (curr.data < val && curr.right != null) {
      curr := curr.right;
    }
  }

  if (curr.data == val) {
    return root;
  } else {
    var n: Node;
    n := singleton(val);
    n.parent := curr;
    if (curr.data > val) {
      curr.left := n;
      return root;
    } else {
      curr.right := n;
      return root;
    }
  }
}

procedure test(root: Node)
  returns (n: Node)
  requires tree(root)
  ensures tree(root) &*& tree(n)
{
  n := singleton(1);
}

procedure root_max(root: Node)
  returns (max: Node)
  requires acc(root) -** tree(root)
  ensures tree(max)
  ensures max.right == null && max.parent == null
{
  var maxp: Node;
  max := root;
  maxp := root;

  while (max.right != null) 
    invariant acc(max) -** tree(max) -** tree(maxp) -** tree(root)
    invariant root == max || maxp.right == max
  {
    maxp := max;
    max := max.right;
  }

  var maxl: Node;
  maxl := max.left;

  if (root != max) {
    maxp.right := maxl;
    if (maxl != null) maxl.parent := maxp;
    root.parent := max;
    max.left := root;
  }
  max.parent := null;
}

procedure remove(root: Node, val: Int) returns (new_root: Node)
  requires tree(root)
  ensures tree(new_root)
{
  var curr: Node;
  curr := root;
  
  while (curr != null && curr.data != val) 
    invariant tree(curr) -** tree(root);
  {
    if (curr.data > val) {
      curr := curr.left;
    } else if (curr.data < val) {
      curr := curr.right;
    }
  }
  
  if (curr == null) {
    return root;
  } else  {
    var cp: Node, cl: Node, cr: Node;
    cp, cl, cr := curr.parent, curr.left, curr.right;
    
    if (cl != null && cr != null) {
      cl := root_max(cl);
      cl.parent := cp;
      cl.right := cr;
      cr.parent := cl;
      
      curr.parent := null;
      free curr;

      if (curr == root) {
        return cl;
      } else {
        if (cp.left == curr) {
          cp.left := cl;
        } else {
          cp.right := cl;
        }
        return root;
      }
    } else {
      curr.parent := null;
      free curr;
      var nc: Node;
      if (cl != null) {
        nc := cl;
      } else {
        nc := cr;
      }
      if (nc != null) nc.parent := cp;
      if (curr == root) {
        return nc;
      } else {
        if (cp.left == curr) {
          cp.left := nc;
        } else {
          cp.right := nc;
        }
        return root;
      }
    }
  }
}

