include "include/sllist.spl";

procedure find(x: Node, ghost root_x: Node, implicit ghost X: Set<Node>) 
returns (res: Node)
  requires lseg(x, root_x, X) &*& root_x.next |-> null;
  ensures acc(X) &*& root_x.next |-> null &*& res == root_x;
  ensures (forall z in X :: z.next == root_x);
{
  var n: Node;
  n := x.next;
  if (n != null) {
    res := find(n, root_x);
    x.next := res;
  } else {
    res := x;
  }
}

procedure union(x: Node, y: Node,  ghost root_x: Node, ghost root_y: Node,
                implicit ghost X: Set<Node>, implicit ghost Y: Set<Node>)
  requires lseg(x, root_x, X) &+& lseg(y, root_y, Y);
  requires root_x.next |-> null &+& root_y.next |-> null;
  ensures acc(X) &+& acc(Y);
  ensures forall z in X -- Y :: z.next == root_x; // this is also OK: forall z in X :: z.next == root_x;
  ensures forall z in Y :: z.next == root_y;
  ensures root_y.next |-> null &+& acc(root_x);
  ensures root_x == root_y || root_x.next == root_y;
{
  var t: Node, s: Node;
  t := find(x, root_x);
  s := find(y, root_y);
  if (t != s) {
    t.next := s;
  }
}

procedure create() returns (res: Node)
  ensures lseg(res, null, Set(res));
{
    var n: Node;
    n := new Node;
    n.next := null;
    return n;
}
