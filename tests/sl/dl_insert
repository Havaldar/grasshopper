insert(lst, elt)
requires dlseg(a, null, null, b) * elt |-> null
ensures (a = null * dlseg(elt, null, null, elt)) || dlseg(a, null, null, b)
{
    if (a = null) {
        elt.back := null;
        return elt;
    } else {
        curr := a;
        prv := null;
        while ( Random && curr.next ~= null ) curr ~= null * dlseg(a, null, curr, prv) * dlseg(curr, prv, null, b) {
            prv := curr;
            curr := curr.next;
        }
        elt.next := curr;
        curr.back := elt;
        if (prv ~= null) {
          prv.next := elt;
        } else {}
        elt.back := prv;
        return a;
    }
}
